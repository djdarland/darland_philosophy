Ported to Linux and Cygwin December 2022 after many efforts since 1995
By Dennis J. Darland dennis.darland@hotmail.com

*** Yes

*** Yes

*** Yes

*** Yes

*** Yes

*** Yes

*** Yes
> > > > > > > > > > > > > > > > > > > > > > 
*** Yes
> 
> write_time(Ignore)?
Time Skipped for Test Suite

*** Yes
Ignore = @.
--1> 

*** No
> % dynamic(rrrr)?
> % dynamic(ssss)?
> 
> %% I indicate for each query whether the immediate response should be
> %% TRUE = Yes or FALSE = No
> 
> %% There may be subsequient No responses - as I may have asked for additional answers with semicolons.
> 
> %% The 7 cases are:
> 
> %% words
> %% ideas
> %% objects
> 
> %% words_ideas
> %% words_objects
> %% ideas_objects
> 
> %% words_ideas_objects
> 
> %% This example illustrates talk about "classes" ("plural" talk).
> %% Really there are no classes - only talk about them.
> %% I am only committed to universals.
> %% Talk about "classes" is reduced to talk about universals
> %% and what they apply to.
> 
> %% First membership
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 0
> %% In reality
> 
> member_reality( Universal, Object)?

*** Yes
Object = cicero, Universal = roman.
--1> ;

*** Yes
Object = catiline, Universal = roman.
--1> ;

*** Yes
Object = tom, Universal = american.
--1> ;

*** Yes
Object = quine, Universal = american.
--1> ;

*** Yes
Object = flipper, Universal = dolphin.
--1> 

*** No
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
> %% 
> %% 1
> %% NA
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
> 
> %% 2
> %% NA
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
> 
> %% 3
> %% NA
> 	
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> 
> %% 4
> %% NA
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 5
> %% guarantees word & object
> 
> %% To keep the database simple I did not declare "everyone" in these classes
> %% There there are ideas with tttt relations with several objects.
> %%
> 
> %% cicero & catiline
> 
> %% 0
> 
> 
> realism( Object)?

*** Yes
Object = tom.
--1> ;

*** Yes
Object = flipper.
--1> ;

*** Yes
Object = sam.
--1> ;

*** Yes
Object = flipper.
--1> ;

*** Yes
Object = lassie.
--1> 

*** No
> 
> idealism( Object)?

*** No
> ;
> ;
> ;
> ;
> 
> 
> there_is_private_language( Idea)?

*** Yes
Idea = tom_mortal_idea.
--1> ;

*** Yes
Idea = quine_mortal_idea.
--1> ;

*** Yes
Idea = quine_american_idea.
--1> ;

*** No
> ;
> 
> 
> member_plural_word_object( tom, now, roman_class_word, X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;	

*** No
> ;
> ;	
> 
> %% cicero, catiline & russell
> 	
> 
> member_plural_word_object( quine, now, human_class_word, X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;	

*** Yes
X = russell.
--1> ;

*** No
> ;	
> 
> %% cicero, catiline & russell
> 
> 
> member_plural_word_object( quine, now, featherless_biped_class_word, X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;	

*** Yes
X = russell.
--1> ;

*** No
> ;	
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 6
> %% guarantees idea & object
> 
> %% cicero & catiline
> 	
> 	
> 
> member_plural_idea_object( tom, now, tom_roman_class_idea, X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;	

*** No
> 
> %% cicero, catiline & russell
> 
> 
> member_plural_idea_object( quine, now, quine_human_class_idea, X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;	

*** Yes
X = russell.
--1> ;

*** No
> ;
> 
> 
> %% cicero, catiline & russell
> 
> 
> member_plural_idea_object( quine, now, quine_featherless_biped_class_idea, X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;

*** Yes
X = russell.
--1> ;

*** No
> ;
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 7
> %% 
> %% cicero, catiline
> 
> 
> member_plural_word_idea_object( tom, now, roman_class_word,
|    			       tom_roman_class_idea,
|    			       X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;

*** No
> 
> %% cicero, catiline & russell
> 
> 
> member_plural_word_idea_object( quine, now, human_class_word,
|    			       quine_human_class_idea,
|    			       X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;

*** Yes
X = russell.
--1> ;

*** No
> ;
> 
> %% cicero, catiline & russell
> 
> 
> member_plural_word_idea_object( quine, now, featherless_biped_class_word,
|    			       quine_featherless_biped_class_idea,
|    			       X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;

*** Yes
X = russell.
--1> ;

*** No
> ;
> 
> 
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %%
> %% 0
> %% in Reality
> %% guaranties Universal and Object exist
> 
> 
> exists_object( Universal, Object)?

*** Yes
Object = cicero, Universal = roman.
--1> ;

*** Yes
Object = catiline, Universal = roman.
--1> ;

*** Yes
Object = tom, Universal = american.
--1> ;

*** Yes
Object = quine, Universal = american.
--1> ;

*** Yes
Object = flipper, Universal = dolphin.
--1> 

*** No
> 
> %% 1
> %% TRUE
> 
> 
> 
> exists_plural_word( tom, now, roman_class_word)? 

*** Yes
--1> 

*** No
> %% 2
> %% TRUE
> 
> 
> exists_plural_idea( tom, now, tom_roman_class_idea)?

*** Yes
--1> 

*** No
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
> 
> %% 3
> %% NA
> 	
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> 
> %% 4
> %% guarantees word and idea
> 
> 
> exists_plural_word_idea( tom, now, roman_class_word, tom_roman_class_idea)?

*** Yes
--1> 	

*** No
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 5
> %% guarantees word & object
> 
> %% cicero & catiline
> 
> 
> exists_plural_word_object( tom, now, roman_class_word, X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;	

*** No
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 6
> %% guarantees idea & object
> 
> %% cicero & catiline (& tom's ideas of them) 
> 	
> 
> exists_plural_idea_object( tom, now, tom_roman_class_idea, X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;	

*** No
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 7
> %% 
> %% cicero & catiline (& words for them) 
> 	
> 
> exists_plural_word_idea_object( tom, now, roman_class_word,
|    			       tom_roman_class_idea,
|    			       X)?

*** Yes
X = cicero.
--1> ;

*** Yes
X = catiline.
--1> ;

*** No
> 
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% now equality -- only applies with object specified
> %% 0
> %% in Reality
> 
> 
> equals_object( quine, quine)?

*** Yes
> ;
> 
> 
> equals_object( quine, russell)?

*** No
> ;
> 
> 
> equals_extension( human, featherless_biped)?

*** Yes
> ;
> ;
> 
> 
> equals_extension( human, dolpin)?

*** No
> ;
> ;
> 
> 
> %% 1
> %% NA
> 
> %% 2
> %% NA
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
> 
> %% 3
> %% NA
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> 
> %% 4
> %% NA
> 	
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 5
> %%
> %% TRUE
> 
> 
> equal_plural_words_objects( quine, now,
|    			   human_class_word, featherless_biped_class_word)?

*** Yes
> 
> %% FALSE
> 
> 
> equal_plural_words_objects( quine, now,
|    			   human_roman_word, featherless_biped_class_word)?

*** No
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 6
> %% guarantees idea & object
> 
> %% TRUE
> 
> 
> equal_plural_ideas_objects( quine, now,
|    			  quine_human_class_idea, quine_featherless_biped_class_idea)?

*** Yes
> 
> %% FALSE
> 
> 
> equal_plural_ideas_objects( quine, now,
|    			  quine_roman_class_idea, quine_featherless_biped_class_idea)?

*** No
> 	
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 7
> %%
> 
> %% FALSE
> 
> 
> equal_plural_words_ideas_objects( quine, now,
|    				 roman_class_word, featherless_biped_class_word,
|    				 quine_roman_class_idea,
|    				 quine_featherless_biped_class_idea)?

*** No
> %% TRUE
> 
> 
> equal_plural_words_ideas_objects( quine, now,
|    				 human_class_word, featherless_biped_class_word,
|    				 quine_human_class_idea,
|    				 quine_featherless_biped_class_idea)?

*** Yes
> 
> 
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% now functions -- only applies with object specified
> %% 0
> %% in Reality
> 
> 
> function( mortal, human )?

*** Yes
> ;
> ;
> ;
> 
> 
> function( dolphin, human )?

*** No
> ;
> ;
> ;
> 
> 
> %% 1
> %% NA
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
> %% 2
> %% NA
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
> 
> %% 3
> %% NA
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> 
> %% 4
> %% NA
> 	
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 5
> %% guarantees word & object
> 
> %% TRUE
> 
> function_plural_word( tom, now, human_word, human_class_word)?

*** Yes
--1> 

*** No
> %% FALSE some humans are not roman
> 
> function_plural_word( tom, now, roman_word, human_class_word)?

*** No
> 
> %% FALSE some humans are not dolphins 
> 
> function_plural_word( tom, now, dolphin_word, human_class_word)?

*** No
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 6
> %% guarantees idea & object
> 
> %% TRUE
> 
> function_plural_idea( tom, now, tom_human_idea, quine_human_class_idea)?

*** Yes
--1> 

*** No
> %% FALSE
> 
> function_plural_idea( tom, now, tom_roman_idea, quine_human_class_idea)?

*** No
> 
> %% FALSE
> 
> function_plural_idea( tom, now, tom_dolphin_idea, quine_human_class_idea)?

*** No
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% 7
> %% 
> %% TRUE
> 
> 
> function_plural_word_idea( tom, now, human_word, human_class_word,
|    				 tom_human_class_idea)?

*** Yes
--1> 

*** No
> %% FALSE
> 
> function_plural_word_idea( tom, now, roman_word, human_class_word,
|    				 tom_roman_class_idea)?

*** No
> 
> %% FALSE
> function_plural_word_idea( tom, now, dolphin_word, roman_class_word,
|    				 tom_roman_class_idea)?

*** No
> 
> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
> %% Start testing new predicates 9/21/2021 
> 
> 
> tttt( tom, now, Y, X)? 

*** Yes
X = flipper, Y = tom_flipper_class_idea.
--1> 

*** No
> ;
> 
> ;
> 
> %% 0
> %% in Reality
> 
> 
> included_in( human, mortal)?

*** Yes
> ;
> ;
> 
> 
> included_in( human, dolphin)?

*** No
> ;
> ;
> 
> %% Inclusion of first in second
> 
> 
> inclusion_plural_words_objects( tom, now, human_class_word, american_class_word)?

*** No
> 	
> 
> inclusion_plural_words_objects( tom, now, american_class_word, human_class_word)?

*** Yes
> 	
> 
> inclusion_plural_words_objects( tom, now, human_class_word, human_class_word)?

*** Yes
> 	
> 
> inclusion_plural_ideas_objects( tom, now, tom_human_class_idea, tom_american_class_idea)?

*** No
> 
> 
> inclusion_plural_ideas_objects( tom, now, tom_american_class_idea, tom_human_class_idea)?

*** Yes
> 
> 
> 
> inclusion_plural_words_ideas_objects( tom, now, human_class_word, tom_human_class_idea, american_class_word, tom_american_class_idea)?

*** Yes
> 
> 
> 
> in_intersection( human, dolphin, russell)?

*** No
> ;
> ;
> 
> 
> in_intersection( human, mortal, russell)?

*** Yes
--1> ;

*** No
> ;
> 
> 
> in_intersection_plural_words_objects( tom, now, human_class_word, roman_class_word, cicero)?

*** Yes
--1> 

*** No
> 
> in_intersection_plural_ideas_objects( tom, now, tom_human_class_idea, tom_roman_class_idea, cicero)?

*** Yes
--1> 

*** No
> 
> in_intersection_plural_words_ideas_objects( tom, now, human_class_word, roman_class_word, tom_human_class_idea, tom_roman_class_idea, cicero)?

*** Yes
--1> 

*** No
> 
> in_union( human, dolphin, russell)?

*** Yes
--1> ;

*** No
> ;
> 
> 
> in_union( dolphin, dolphin, russell)?

*** No
> ;
> ;
> 
> 
> in_union_plural_words_objects( tom, now, human_class_word, roman_class_word, russell)?

*** Yes
--1> 

*** No
> 
> in_union_plural_ideas_objects( tom, now, tom_human_class_idea, tom_roman_class_idea, russell)?

*** Yes
--1> 

*** No
> 
> in_union_plural_words_ideas_objects( tom, now, human_class_word, roman_class_word, tom_human_class_idea, tom_roman_class_idea, russell)?

*** Yes
--1> 

*** No
> 
> in_first_minus_second( mortal, human, russell)?

*** No
> ;
> ;
> 
> 
> in_first_minus_second( mortal, dolphin, russell)?

*** Yes
--1> ;

*** No
> ;
> 
> 
> in_w1_minus_w2_words_objects( tom, now, human_class_word, roman_class_word, cicero)?

*** No
> 
> 
> 
> in_w1_minus_w2_words_objects( tom, now, human_class_word, roman_class_word, russell)?

*** Yes
--1> 

*** No
> 
> in_i1_minus_i2_ideas_objects( tom, now, tom_human_class_idea, tom_roman_class_idea, cicero)?

*** No
> 
> 
> in_i1_minus_i2_ideas_objects( tom, now, tom_human_class_idea, tom_roman_class_idea, russell)?

*** Yes
--1> 

*** No
> 
> in_wi1_minus_wi2_words_ideas_objects( tom, now, human_class_word, roman_class_word, tom_human_class_idea, tom_roman_class_idea, cicero)?

*** No
> 
> 
> in_wi1_minus_wi2_words_ideas_objects( tom, now, human_class_word, roman_class_word, tom_human_class_idea, tom_roman_class_idea, russell)?

*** Yes
--1> 

*** No
> 
> write_stats(Ignore)?
Stats Skipped for Test Suite

*** Yes
Ignore = @.
--1> 

*** No
> halt?

