%% Copyright (C) 2017, 2019, 2021, 2023, 2024 Dennis J. Darland

load("RULES2/life_0001.lf")?
% load("FACTS2/facts_0031.lf")?
load("FACTS2/facts_0033.lf")?
load("RULES2/rules_0031.lf")?
load("RULES2/rules_0032.lf")?
load("RULES2/rules_0033.lf")?
load("RULES2/rules_0034.lf")?
% load("RULES2/rules_0035.lf")?
% load("RULES2/rules_0036.lf")?
% load("RULES2/rules_0038.lf")?

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% This file only checks rules (relating to propositions). 


trace_input(true)?

write_time(Ignore)?

% dynamic(rrrr)?
% dynamic(ssss)?

%% I indicate for each query whether the immediate response should be
%% TRUE = Yes or FALSE = No

%% There may be subsequient No responses - as I may have asked for additional answers with semicolons.

%% The 7 cases are:

%% words
%% ideas
%% objects

%% words_ideas
%% words_objects
%% ideas_objects

%% words_ideas_objects

%% This example illustrates talk about "classes" ("plural" talk).
%% Really there are no classes - only talk about them.
%% I am only committed to universals.
%% Talk about "classes" is reduced to talk about universals
%% and what they apply to.

%% First membership

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 0
%% In reality
qqqq(member_reality, Universal, Object)?
;
;
;
;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
%% 
%% 1
%% NA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

%% 2
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

%% 3
%% NA
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 4
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 5
%% guarantees word & object

%% To keep the database simple I did not declare "everyone" in these classes
%% There there are ideas with tttt relations with several objects.
%%

%% cicero & catiline

%% 0

qqqq(realism, Object)?
;
;
;
;

qqqq(idealism, Object)?
;
;
;
;

qqqq(there_is_private_language, Idea)?
;
;
;
;

qqqq(member_plural_word_object, tom, now, roman_class_word, X)?
;
;	
;
;	

%% cicero, catiline & russell
	
qqqq(member_plural_word_object, quine, now, human_class_word, X)?
;
;	
;
;	

%% cicero, catiline & russell

qqqq(member_plural_word_object, quine, now, featherless_biped_class_word, X)?
;
;	
;
;	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 6
%% guarantees idea & object

%% cicero & catiline
	
	
qqqq(member_plural_idea_object, tom, now, tom_roman_class_idea, X)?
;
;	

%% cicero, catiline & russell

qqqq(member_plural_idea_object, quine, now, quine_human_class_idea, X)?
;
;	
;
;


%% cicero, catiline & russell

qqqq(member_plural_idea_object, quine, now, quine_featherless_biped_class_idea, X)?
;
;
;
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7
%% 
%% cicero, catiline

qqqq(member_plural_word_idea_object, tom, now, roman_class_word,
			       tom_roman_class_idea,
			       X)?
;
;

%% cicero, catiline & russell

qqqq(member_plural_word_idea_object, quine, now, human_class_word,
			       quine_human_class_idea,
			       X)?
;
;
;
;

%% cicero, catiline & russell

qqqq(member_plural_word_idea_object, quine, now, featherless_biped_class_word,
			       quine_featherless_biped_class_idea,
			       X)?
;
;
;
;



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% 0
%% in Reality
%% guaranties Universal and Object exist

qqqq(exists_object, Universal, Object)?
;
;
;
;


%% 1
%% TRUE


qqqq(exists_plural_word, tom, now, roman_class_word)? 

%% 2
%% TRUE

qqqq(exists_plural_idea, tom, now, tom_roman_class_idea)?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

%% 3
%% NA
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 4
%% guarantees word and idea

qqqq(exists_plural_word_idea, tom, now, roman_class_word, tom_roman_class_idea)?
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 5
%% guarantees word & object

%% cicero & catiline

qqqq(exists_plural_word_object, tom, now, roman_class_word, X)?
;
;	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 6
%% guarantees idea & object

%% cicero & catiline (& tom's ideas of them) 
	
qqqq(exists_plural_idea_object, tom, now, tom_roman_class_idea, X)?
;
;	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7
%% 
%% cicero & catiline (& words for them) 
	
qqqq(exists_plural_word_idea_object, tom, now, roman_class_word,
			       tom_roman_class_idea,
			       X)?
;
;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% now equality -- only applies with object specified
%% 0
%% in Reality

qqqq(equals_object, quine, quine)?
;

qqqq(equals_object, quine, russell)?
;

qqqq(equals_extension, human, featherless_biped)?
;
;

qqqq(equals_extension, human, dolpin)?
;
;


%% 1
%% NA

%% 2
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

%% 3
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 4
%% NA
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 5
%%
%% TRUE

qqqq(equal_plural_words_objects, quine, now,
			   human_class_word, featherless_biped_class_word)?

%% FALSE

qqqq(equal_plural_words_objects, quine, now,
			   human_roman_word, featherless_biped_class_word)?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 6
%% guarantees idea & object

%% TRUE

qqqq(equal_plural_ideas_objects, quine, now,
			  quine_human_class_idea, quine_featherless_biped_class_idea)?

%% FALSE

qqqq(equal_plural_ideas_objects, quine, now,
			  quine_roman_class_idea, quine_featherless_biped_class_idea)?
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7
%%

%% FALSE

qqqq(equal_plural_words_ideas_objects, quine, now,
				 roman_class_word, featherless_biped_class_word,
				 quine_roman_class_idea,
				 quine_featherless_biped_class_idea)?
%% TRUE

qqqq(equal_plural_words_ideas_objects, quine, now,
				 human_class_word, featherless_biped_class_word,
				 quine_human_class_idea,
				 quine_featherless_biped_class_idea)?



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% now functions -- only applies with object specified
%% 0
%% in Reality

qqqq(function, mortal, human )?
;
;
;

qqqq(function, dolphin, human )?
;
;
;


%% 1
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
%% 2
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

%% 3
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 4
%% NA
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 5
%% guarantees word & object

%% TRUE
qqqq(function_plural_word, tom, now, human_word, human_class_word)?

%% FALSE some humans are not roman
qqqq(function_plural_word, tom, now, roman_word, human_class_word)?

%% FALSE some humans are not dolphins 
qqqq(function_plural_word, tom, now, dolphin_word, human_class_word)?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 6
%% guarantees idea & object

%% TRUE
qqqq(function_plural_idea, tom, now, tom_human_idea, quine_human_class_idea)?

%% FALSE
qqqq(function_plural_idea, tom, now, tom_roman_idea, quine_human_class_idea)?

%% FALSE
qqqq(function_plural_idea, tom, now, tom_dolphin_idea, quine_human_class_idea)?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7
%% 
%% TRUE

qqqq(function_plural_word_idea, tom, now, human_word, human_class_word,
				 tom_human_class_idea)?

%% FALSE
qqqq(function_plural_word_idea, tom, now, roman_word, human_class_word,
				 tom_roman_class_idea)?

%% FALSE
function_plural_word_idea( tom, now, dolphin_word, roman_class_word,
				 tom_roman_class_idea)?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Start testing new predicates 9/21/2021 


tttt( tom, now, Y, X)? 

;

;

%% 0
%% in Reality

qqqq(included_in, human, mortal)?
;
;

qqqq(included_in, human, dolphin)?
;
;

qqqq(inclusion_plural_words_objects, tom, now, human_class_word, american_class_word)?
	
qqqq(inclusion_plural_ideas_objects, tom, now, tom_human_class_idea, tom_american_class_idea)?

qqqq(inclusion_plural_words_ideas_objects, tom, now, human_class_word, tom_human_class_idea, american_class_word, tom_american_class_idea)?


qqqq(in_intersection, human, dolphin, russell)?
;
;

qqqq(in_intersection, human, mortal, russell)?
;
;

qqqq(in_intersection_plural_words_objects, tom, now, human_class_word, roman_class_word, cicero)?

qqqq(in_intersection_plural_ideas_objects, tom, now, tom_human_class_idea, tom_roman_class_idea, cicero)?

qqqq(in_intersection_plural_words_ideas_objects, tom, now, human_class_word, roman_class_word, tom_human_class_idea, tom_roman_class_idea, cicero)?

qqqq(in_union, human, dolphin, russell)?
;
;

qqqq(in_union, dolphin, dolphin, russell)?
;
;

qqqq(in_union_plural_words_objects, tom, now, human_class_word, roman_class_word, russell)?

qqqq(in_union_plural_ideas_objects, tom, now, tom_human_class_idea, tom_roman_class_idea, russell)?

qqqq(in_union_plural_words_ideas_objects, tom, now, human_class_word, roman_class_word, tom_human_class_idea, tom_roman_class_idea, russell)?

qqqq(in_first_minus_second, mortal, human, russell)?
;
;

qqqq(in_first_minus_second, mortal, dolphin, russell)?
;
;

qqqq(in_w1_minus_w2_words_objects, tom, now, human_class_word, roman_class_word, cicero)?


qqqq(in_w1_minus_w2_words_objects, tom, now, human_class_word, roman_class_word, russell)?

qqqq(in_i1_minus_i2_ideas_objects, tom, now, tom_human_class_idea, tom_roman_class_idea, cicero)?

qqqq(in_i1_minus_i2_ideas_objects, tom, now, tom_human_class_idea, tom_roman_class_idea, russell)?

qqqq(in_wi1_minus_wi2_words_ideas_objects, tom, now, human_class_word, roman_class_word, tom_human_class_idea, tom_roman_class_idea, cicero)?

qqqq(in_wi1_minus_wi2_words_ideas_objects, tom, now, human_class_word, roman_class_word, tom_human_class_idea, tom_roman_class_idea, russell)?

% qqqq(in_zero, )?

qqqq(in_one, intelligent_fish)?
;
;

qqqq(in_one, human)?
;
;

qqqq(in_two, dolphin)?
;
;

qqqq(in_two, human)?
;
;

qqqq(in_one_plural_word, tom, now, flipper_class_word)?

qqqq(in_one_plural_word, tom, now, american_class_word)?

qqqq(in_one_plural_idea, tom, now, tom_flipper_class_idea)?

qqqq(in_one_plural_idea, tom, now, tom_american_class_idea)?

qqqq(in_one_plural_word_idea, tom, now, flipper_class_word, tom_flipper_class_idea)?

qqqq(in_one_plural_word_idea, tom, now, american_class_word, tom_american_class_idea)?

qqqq(in_two_plural_word, tom, now, american_class_word)?

qqqq(in_two_plural_word, tom, now, flipper_class_word)?

qqqq(in_two_plural_idea, tom, now, tom_american_class_idea)?

qqqq(in_two_plural_idea, tom, now, tom_flipper_class_idea)?

qqqq(in_two_plural_word_idea, tom, now, american_class_word, tom_american_class_idea)?

qqqq(in_two_plural_word_idea, tom, now, flipper_class_word, tom_flipper_class_idea)?

qqqq(instantiation_of_universal, intelligent_fish)?
;
;

qqqq(instantiation_of_universal, dolphin)?
;
;
;

qqqq(instantiation_of_universal, intelligent_dog)?
;
;
;

qqqq(instantiation_of_predecessor_of_instantiation, intelligent_fish, dolphin,[flipper],[flipper,sam])?
;
;
;

qqqq(instantiation_of_predecessor_of_instantiation, dolphin, intelligent_dog,[flipper,sam],[lassie,laddie,fido])?
;
;

qqqq(instantiation_of_predecessor_of_instantiation, intelligent_dog, dolphin, [lassie,laddie,fido], [flipper,sam])?
;
;

write_stats(Ignore)?

halt?
