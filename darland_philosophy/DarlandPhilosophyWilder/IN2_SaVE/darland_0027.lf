%% Copyright (C) 2017, 2019, 2021 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% This file only checks rules (relating to propositions). 

load("RULES2/life_0001.lf")?  %% time and stats
load("FACTS2/facts_0006.lf")? %% mini universe for definite descriptions
                              %% and classes
load("RULES2/rules_0009.lf")? %% rules for definite descriptions
load("RULES2/rules_0011.lf")? %% rules for classes

trace_input(true)?

write_time(Ignore)?

%% "%% start comment lines"

%% dd stands for definite description
%% capital letters start variables.
%% lower case start constants
%% we want 
%% dd(exists, X, wrote_waverley)?
%% to be true - scott

dd(exists, X, wrote_waverley)?

%% we want 
%% dd(exists, bertie, wrote_waverley)? 
%% to be false

dd(exists, bertie, wrote_waverley)? 

%% we want 
%% dd(exists, X, helped_write_pm)? 
%% to be false - definite descriptions must be unique

dd(exists, X, helped_write_pm)? 

%% we want 
%% dd(exists, bertie, helped_write_pm)? 
%% to be false

dd(exists, bertie, helped_write_pm)? 

%% we want 
%% dd(exists, alfred, helped_write_pm)?
%% to be false

dd(exists, alfred, helped_write_pm)?

%% we want 
%% dd(function, bald, X, present_king_of_france)?
%% to be false

dd(function, bald, X, present_king_of_france)?

%% we want 
%% dd(function, bald, X, wrote_process_and_reality)?
%% to be true

dd(function, bald, X, wrote_process_and_reality)?

%% we want 
%% dd(function, bald, alfred, wrote_process_and_reality)?
%% to be true

dd(function, bald, alfred, wrote_process_and_reality)?

%% we want 
%% dd(function, bald, X, helped_write_pm)?
%% to be false

dd(function, bald, X, helped_write_pm)?

%% we want 
%% dd(equals, X, helped_write_pm, wrote_waverley)?
%% to be false

dd(equals, X, helped_write_pm, wrote_waverley)?

%% we want 
%% dd(equals, X, is_morning_star, is_evening_star)?
%% to be true

dd(equals, X, is_morning_star, is_evening_star)?

%% cls stands for class
%% capital letters start variables.
%% lower case start constants
%% we want 
%% cls(exists, X, wrote_waverley)?
%% to be true - scott

cls(exists, X, wrote_waverley)?

%% we want 
%% cls(exists, bertie, wrote_waverley)? 
%% to be false

cls(exists, bertie, wrote_waverley)? 

%% we want 
%% cls(exists, X, helped_write_pm)? 
%% to be true - classes need not be unique

cls(exists, X, helped_write_pm)? 
;
	
%% we want 
%% cls(exists, bertie, helped_write_pm)? 
%% to be true

cls(exists, bertie, helped_write_pm)? 

%% we want 
%% cls(exists, alfred, helped_write_pm)?
%% to be true

cls(exists, alfred, helped_write_pm)?

%% we want 
%% cls(member, X, wrote_waverley)?
%% to be true - scott

cls(member, X, wrote_waverley)?

%% we want 
%% cls(member, bertie, wrote_waverley)? 
%% to be false

cls(member, bertie, wrote_waverley)? 

%% we want 
%% cls(member, X, helped_write_pm)? 
%% to be true - classes need not be unique

cls(member, X, helped_write_pm)? 
;
	
%% we want 
%% cls(member, bertie, helped_write_pm)? 
%% to be true

cls(member, bertie, helped_write_pm)? 

%% we want 
%% cls(member, alfred, helped_write_pm)?
%% to be true

cls(member, alfred, helped_write_pm)?

%% we want 
%% cls(equals, is_morning_star, is_evening_star)?
%% to be true

cls(equals, is_morning_star, is_evening_star)?

%% we want 
%% cls(equals, is_bertie, is_alfred)?
%% to be false

cls(equals, is_bertie, is_alfred)?

%% we want 
%% cls(equals, is_morning_star, is_scott)?
%% to be false

cls(equals, is_morning_star, is_scott)?

%% we want 
%% cls(function, bald, X, present_king_of_france)?
%% to be false

cls(function, bald, present_king_of_france)?

%% we want 
%% cls(function, one, wrote_process_and_reality)?
%% to be true

cls(function, one, wrote_process_and_reality)?

%% we want 
%% cls(function, one, helped_write_pm)?
%% to be false

cls(function, one, helped_write_pm)?

%% we want 
%% cls(function, two, wrote_process_and_reality)?
%% to be false

cls(function, two, wrote_process_and_reality)?

%% we want 
%% cls(function, two, helped_write_pm)?
%% to be true

cls(function, two, helped_write_pm)?

%% we want 
%% cls(equals, wrote_pm, wrote_waverley)?
%% to be false

cls(equals, helped_write_pm, wrote_waverley)?

write_stats(Ignore)?

halt?
