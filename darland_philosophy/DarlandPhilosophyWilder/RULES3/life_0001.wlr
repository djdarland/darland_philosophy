%% Copyright (C) 2017, 2019, 2021, 2023 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.

member(X, [X | _]).

member(X, [_| Ytail]) :- member(X, Ytail]).


persistent(clock_start)?

write_time(Ignore) :- write("Time Skipped for Test Suite"), nl.

% write_time(Ignore) :- write(system("date")),
%	clock_start <<- real_time.

write_stats(Ignore) :- write("Stats Skipped for Test Suite"), nl.


% write_stats(Ignore) :- write("CPU Time ", cpu_time, " Seconds"),nl,
%	write("Clock Time ", real_time - clock_start, " Seconds"),nl,
%	statistics.

call_goal(Goal) :- write('AA001 Goal = ', Goal), Goal = [H | T], write('AA002 H = ', H, 'T = ', T), call_sub_1(H, T, 0).
call_sub_1(H, T, N) :- write('BB001 H = ', H, 'T = ', T, 'N = ', N), T = [T1 | T2], H.N = T1, call_sub_1(H, T2, N + 1).
call_sub_1(H, [], N) :- write('CC001 H = ', H), H.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% find_all from Prolog Programming in Depth
%% by Michael A. Covington, Donald Nute, Andre Vellino
%% page 164 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% find_all(X, Goal, List)
%% X contains one or more uninstantiated variables that can also occur in Goal.
%% (X can be a single uninstantiated variable.)
%% List is a list of all of the instantiations 
%% of X with which Goal will succeed.
%% Modified (djd 2/2017) to remove explicit 'call'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

find_all(X, Goal, _) :- asserta(find_item('*MARK*')), Goal, asserta(find_item(X)), fail.

find_all(_, _, List) :- find_collect([], L), !, List = L.

find_collect(List1, List2) :- find_next(X), !, find_collect([X | List1], List2).

find_collect(List, List).

find_next(X) :- retract(find_item(X)), !, X :\== '*MARK*'.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
find_all_A(X_A, Goal_A, _) :- asserta(find_item_A('*MARK_A*')), Goal_A, asserta(find_item_A(X_A)), fail.

find_all_A(_, _, List_A) :- find_collect_A([], L_A), !, List_A = L_A.

find_collect_A(List1_A, List2_A) :- find_next_A(X_A), !, find_collect_A([X_A | List1_A], List2_A).

find_collect_A(List_A, List_A).

find_next_A(X_A) :- retract(find_item_A(X_A)), !, X_A :\== '*MARK_A*'.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

find_all_B(X_B, Goal_B, _) :- asserta(find_item_B('*MARK_B*')), Goal_B, asserta(find_item_B(X_B)), fail.

find_all_B(_, _, List_B) :- find_collect_B([], L_B), !, List_B = L_B.

find_collect_B(List1_B, List2_B) :- find_next_B(X_B), !, find_collect_B([X_B | List1_B], List2_B).

find_collect_B(List_B, List_B).

find_next_B(X_B) :- retract(find_item_B(X_B)), !, X_B :\== '*MARK_B*'.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
find_all_c(X_c, Goal_c, _) :- asserta(find_item_c('*MARK*_c')), Goal_c, asserta(find_item_c(X)), fail.

find_all_c(_, _, List_c) :- find_collect([], L_c), !, List_c = L_c.

find_collect_c(List1_c, List2_c) :- find_next_c(X_c), !, find_collect_c([X_c | List1_c], List2_c).

find_collect_c(List_c, List_c).

find_next_c(X_c) :- retract(find_item_c(X_c)), !, X_c :\== '*MARK_c*'.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
