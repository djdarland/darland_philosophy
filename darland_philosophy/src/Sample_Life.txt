%% Copyright (C) 2017, 2019, 2020, 2021, 2022 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% Life predicates to simulate Dennis J. Darlands philosophy. 
%% Started Writing 1/4/2017 
%% This is a total rewrite of what I started about 10 years ago.
%% 
%%
%% I have made the propositional attitude relatons support arbitrary arity.
%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Define sense (close to Frege's Sinn) (useless)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sense_of_relation(Idea) :- ssss(Subject, Time, Idea, Relation).

sense_of_object(Idea) :- ssss(Subject, Time, Idea, Object).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% qqqq is the only relation having ontological status.
%% qqqq is the exemplification of a universal in the following arguments.

%% I define some other WildLIFE predicates (relations), however, these
%% could all be eliminated.

%% as in the predicate pred(Arg1, Arg2, ...)
%% by
%% qqqq(Pred, Arg1, Arg2, ...) :-
%%    Pred = pred,
%%    ...
%% I also use qqqq4 for positive [base] facts.
%% I also use qqqq5 for negative [base] facts.
%% This is to avoid conflict with qqqq.
%% These are to deal with negation by failure, and are otherwise convenient.
%% That is to provide a way for negative facts other than failure.

%% Using qqqq as the only ontologically significant relation eliminates
%% any need to consider relations as intensional.

%% Traditionally if (x)(Fx equ Gx) then if taken extensionally, F = G.
%% But with qqqq this becomes (x)(qqqq(F,x) equ qqqq(G, x)).
%% F and G are no longer predicates so the issue of their equality
%% under extensionality does not arise.

%% As I am using quantification and negation as provided in WildLIFE,
%% I do not analyze them here.

%% I think, perhaps quantification and variables would best be handled
%% as Quine did in "Variables Explained Away", Proceedings of the American
%% Philosophical Society 104: 343-347.
%% Gregory Landini uses that in his _Repairing Bertrand Russell's 1913 Theory
%% of Knowledge_.

%% I find Landini's book difficult in other respects, and have not finished
%% it - (As of 8/26/2022).

%% A script qqqq_pre_all.sh translates fact and query files
%% using a Unicon program qqqq_pre.icn converting the qqqq predicates
%% to the predicates in the rules files.
%% This is done only for efficiency.
%% E.g. convets qqqq(f, x, y) to f(x, y)

%% some possible arguments (universals) are rrrr, ssss,
%% tttt, rrss, and rrtt.
%% rrss is defined in terms of rrrr and ssss.
%% rrrr and ssss are undefined here
%% - but not necessarily ontologically primitive 

%% rrrr is relation between word and idea.
%% ssss is relation between idea and one object.
%% tttt is relation between idea and one or more objects.

%% rrss is relative product of rrrr and ssss.
%% rrtt is relative product of rrrr and tttt.

%% also there are ssss2 and tttt2

%% ssss2 checks uniqueness - if the database is correct it should
%% not be needed.
%% uniqueness is essential to essentially singular ideas
%% So it is required even for understanding or belief if ssss is used

ssss2(Subject, Time, Idea, Object) :-
	ssss(Subject, Time, Idea, Object),
	\+ non_unique(Subject, Time, Idea, Object).

non_unique(Subject, Time, Idea, Object1) :-
	ssss(Subject, Time, Idea, Object2),
	Object1 :\== Object2.

%% tttt2 also requires uniqueness
%% this uniqueness is for contingently singular ideas

tttt2(Subject, Time, Idea, Object) :-
	tttt(Subject, Time, Idea, Object),
	\+ non_unique_t(Subject, Time, Idea, Object).

non_unique_t(Subject, Time, Idea, Object1) :-
	tttt(Subject, Time, Idea, Object2),
	Object1 :\== Object2.

%% definition of rrss in terms of rrrr and ssss.
%% Note: qqqq is a dynamic predicate in WildLIFE - so it can be extended.

rrss(Subject, Time, Word, Object) :-
	rrrr(Subject, Time, Word, Idea),
	ssss2(Subject, Time, Idea, Object).

%% definition of rrtt in terms of rrrr andtttt.
%% Note: qqqq is a dynamic predicate in WildLIFE - so it can be extended.

rrtt(Subject, Time, Word, Object) :-
	rrrr(Subject, Time, Word, Idea),
	tttt(Subject, Time, Idea, Object).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% There are 7 relations of understanding.
%% Those of understanding are defined in terms of rrrr and ssss

%% The 7 cases are:

%% 1 words
%% 2 ideas
%% 3 objects

%% 4 words_ideas
%% 5 words_objects
%% 6 ideas_objects

%% 7 words_ideas_objects

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% understands_words is defined.
%% It applies to an intelligent Subject at some Time.
%% There is a list of words.
%% The arity_idea must match the number of words following the relation word.
%% (Or an arity_relation of -999 matches any number of words.)
%% The type ideas corresponding to the words must be one less thasn the type 
%% idea corresponding to the relation idea.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% ONE EXAMPLE EXPLAINED CAREFULLY - I HOPE!!
%% 1

%% I am going to comment on one sample carefully and thoroughly I hope.
%% I hope any reader can learn enough to apply principles in other cases.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% First some illustrations of WildLIFE 

%% Note Variables start with uppercase letters, constants with lower case.
%% There are also integers.

%% predicate1(Arg1, Arg2, Arg3) :- predicate2(Arg1, Arg2),
%%                                 predicate3(Arg1, Arg3).'

%% means if predicate2(Arg1, Arg2) and predicate3(Arg1, Arg3)
%%       then predicate1(Arg1, Arg2, Arg3).

%% ":-" means "if"

%% "," separates Arguments in predicates and means "and" between clauses.
%%

%% Two rules can be used for "or"
%% if we add
%% predicate1(Arg1, Arg2, Arg3) :- predicate4(Arg1, Arg2),
%%                                 predicate5(Arg1, Arg3).
%% then we have:

%%       if (predicate3(Arg1, Arg2) and predicate3(Arg1, Arg3))
%%       or (predicate4(Arg1, Arg2) and predicate5(Arg1, Arg3))
%%       then predicate1(Arg1, Arg2, Arg3).

%%   "\+" is negation by "failure"
%% (if it cannot prove that something is true is says that it is false)
%%   I also use qqqq4 to state positive facts in the database.
%%          and qqqq5 to state negative facts in the database.

%% End of WildLIFE Illustrations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%   Begining Of Philosophy Sample 
%%   match_word below is recursive. Each call removes a Word.
%%   It also subtracts one from the Arity of the Relation_Idea.
%%   The list is finite in WildLIFE, so eventually there will be
%%   an empty list and the Arity can be checked. (or be -999)
%%   It also checks if the Ideas are one less in type than the Relation Idea.
%%   rrrr sees if the Subject has that relation between the Word and the Idea.
understands_words(Subject, Time, [[Relation_Word] | List]) :-
    %% Get Relation_Idea that matches other arguments.
    rrrr(Subject, Time, Relation_Word, Relation_Idea),
    %% Get Arity of Relation_Idea
    arity_idea(Relation_Idea, Arity),
    %% Get Type of Relation_Idea
    type_idea(Relation_Idea, Type),
    % List of Words.
    % Objects should be Type one less than Type of Relation
    match_word(Subject, Time, List, Arity, Type - 1).

%% The following are auxilary predicates - they have no ontological
%% Significance.

%% Match Empty List - Recursion Ends And Arity has counted down to 0.
match_word(Subject, Time, [], 0, Type).

%% Match Empty List -  -999 indicates arbitrary arity.
match_word(Subject, Time, [], -999, Type).

%% Tackle Words Recursively one at a Time.
match_word(Subject, Time, [[Word] | List],
	   Arity, Type) :-
    
    % List of Word Object Pairs.
    %% Get Idea that Matches Word
    rrrr(Subject, Time, Word, Idea),
    %% Get Type of Idea
    type_idea(Idea, Type),
    %% Recurse - with remaider of List and subtract one from Arity unless -999
    match_word(Subject, Time, List,
		   % if Arity is not Arbitrary sub 1
		   cond(Arity =\= -999, Arity - 1, -999),
		   Type).

