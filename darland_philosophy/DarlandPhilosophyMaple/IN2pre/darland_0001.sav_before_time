with(LinearAlgebra):
Digits := 12;

particle1 := table():
particle2 := table():
particle3 := table():

particle1[name] := "particle1":
particle1[mass] := 1.3:
particle1[charge] := 3.3:
particle1[location] := <1.0,2.0,3.0>:
particle1[velocity] := <1.0,2.0,3.0>:
particle1[name] := "particle1":

particle2[name] := "particle2":
particle2[mass] := 2.3:
particle2[charge] := 4.3:
particle2[location] := <8.0,1.0,2.0>:
particle2[velocity] := <7.0,-3.0,0.0>:

particle3[name] := "particle3":
particle3[mass] := 4.1:
particle3[charge] := -2.3:
particle3[location] := <-8.0,-1.0,2.0>:
particle3[velocity] := <5.0,3.0,0.0>:

world := {particle1, particle2, particle3}:

external_world := proc(w, p) w minus {p};
end;

ewp1 := external_world(world, particle1);
ewp2 := external_world(world, particle2);
ewp3 := external_world(world, particle3);

# field (Vector) of gravity caused by p2 at p1
gravity := proc(p2, p1)
local G;
    G := 6.67E-11;
    G * p2[mass] * (p2[location] - p1[location]) / DotProduct(p2[location], p1[location]);
end:

# Add to Set of gravity Vectors at p1
union_to_mind_grav := proc(p)
    local p2;
    p[mind_grav] := {};
    for p2 in external_world(world, p) do
        p[mind_grav] := p[mind_grav] union {gravity(p2, p)};
    od;
    return 0;
end:

# Add to Sum of gravity Vectors at p1
sum_to_body_grav := proc(p)
    local p2;
    p[body_grav] := <0.0, 0.0, 0.0>;
    for p2 in external_world(world, p) do
        p[body_grav] := p[body_grav] + gravity(p2, p);
    od;
    return 0;
end:


out := map(union_to_mind_grav, world):
out2 := map(sum_to_body_grav, world):

map(print, evalf(world));

quit;

