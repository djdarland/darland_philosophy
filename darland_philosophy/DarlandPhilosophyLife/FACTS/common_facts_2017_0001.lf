%% Copyright (C) 2017, 2019 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.


%% Life database for use with predicates 
%% to simulate Dennis J. Darlands philosophy. 
%% Started Writing 1/4/2017
%% Major re-write starting 8/19/2019
%%
%% Total rewite of what I started about 2007.
%%

%% understands_words_ideas_objects(Subject, Time, Type, Arity,
%% 				Verb, Verb_Idea, Relation,
%% 				A_Word, A_Idea, A_Object,
%% 				B_Word, B_Idea, B_Object,
%% 				C_Word, C_Idea, C_Object) :-
%%     rrrr1(Subject, Time, Type, Arity, Verb, Idea_Verb),
%%     rrrr0(Subject, Time, Type - 1, A_Word, A_Idea),
%%     rrrr0(Subject, Time, Type - 1, B_Word, B_Idea),
%%     rrrr0(Subject, Time, Type - 1, C_Word, C_Idea),
%%     ssss1(Subject, Time, Type, Arity, Idea_Verb, Relation),
%%     ssss0(Subject, Time, Type - 1, A_Idea, A_Object),
%%     ssss0(Subject, Time, Type - 1, B_Idea, B_Object),
%%     ssss0(Subject, Time, Type - 1, C_Idea, C_Object).





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% conventions.
%% tom, quine, cicero etc stand for people (instances of Subjects or Objects.)
%% There could also be non-animate objects such as a table/
%% there (some would argue) might also be non-human Subjects - such as a dog.
%% tom might have an idea of cicero. This would be represented tom_cicero_idea.
%% The 1st tom indicates that it is tom's idea. cicero indicates that it is an
%% idea of cicero. The final idea indicates that it is an idea.
%% tom might have an word in a shared language for cicero. This is indicated by %% cicero_word. 
%% quine might also an idea quine_cicero_idea of cicero. (note his idea is
%% different). quine might share, however the word cicero_word with tom.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ssss(Subject, Time, Type, A_idea, A_object)
%%
%% there are two ideas for the same person - cicero (tully)
%% but prolog & wild life cannot let two atoms be identical 
%% so the object must be the same for both (cicero)
%%
%%
%% I am not using Types much yet. Mainly I wanted to be able to use them later.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


ssss0(tom, now, 0, tom_cicero_idea, cicero).
ssss0(tom, now, 0, tom_tully_idea, cicero).
ssss0(tom, now, 0, tom_cataline_idea, cataline).
ssss0(tom, now, 0, tom_tom_idea, tom).
ssss1(tom, now, 1, 1, tom_human_idea, human).
ssss1(tom, now, 1, 1, tom_featherless_biped_idea, featherless_biped).
ssss0(quine, now, 0, quine_cicero_idea, cicero).
ssss0(quine, now, 0, quine_tully_idea, cicero).
ssss0(quine, now, 0, quine_cataline_idea, cataline).
ssss0(quine, now, 0, quine_tom_idea, tom).
ssss1(quine, now, 1, 1, quine_human_idea, human).
ssss1(quine, now, 1, 1, quine_featherless_biped_idea, featherless_biped).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The same conventions apply to relations - except they are 1 Type higher.
%% They also have an Arity - the number of objects they relate.
%% I have only coded up to an arity of 3.
%% It can easily be seen how it could be extended.
%% I expect to increase in 2019 version.
%% Also I could have used lists to make any arity to be handled.
%% But the resukting code would be harder to understand - so I avoided that.

%% ssss(Subject, Time, Type+1, Arity, Idea, Relation)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ssss1(tom, now, 1, 2, tom_denounced_idea, denounced).
ssss1(tom, now, 1, 1, tom_human_idea, human).
ssss1(tom, now, 1, 1, tom_featherless_biped_idea, featherless_biped).
ssss1(tom, now, 1, 1, tom_american_idea, american).
ssss1(tom, now, 1, 1, tom_roman_idea, roman).
ssss1(tom, now, 2, 2, tom_not_formally_equivalent_idea, not_formally_equivalent).
ssss1(tom, now, 2, 2, tom_formally_equivalent_idea, formally_equivalent).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ssss1(quine, now, 1, 2, quine_denounced_idea, denounced).
ssss1(quine, now, 1, 1, quine_human_idea, human).
ssss1(quine, now, 1, 1, quine_featherless_biped_idea, featherless_biped).
ssss1(quine, now, 1, 1, quine_american_idea, american).
ssss1(quine, now, 1, 1, quine_roman_idea, roman).
ssss1(quine, now, 2, 2, quine_not_formally_equivalent_idea, not_formally_equivalent).
ssss1(quine, now, 2, 2, quine_formally_equivalent_idea, formally_equivalent).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% words are related to ideas.
%% The words being shared through learning.

%% rrrr(Subject, Time, Type, A_word, A_idea)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rrrr0(tom, now, 0, cicero_word, tom_cicero_idea).
rrrr0(tom, now, 0, cataline_word, tom_cataline_idea).
rrrr0(tom, now, 0, tully_word, tom_tully_idea).
rrrr0(tom, now, 0, tom_word, tom_tom_idea).
rrrr1(tom, now, 1, 1, human_word, tom_human_idea).
%% rrrr1(Subject, Time, Type, Arity, Verb, Idea_Verb)
rrrr1(tom, now, 1, 1, featherless_biped_word,tom_featherless_biped).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rrrr0(quine, now, 0, cicero_word, quine_cicero_idea).
rrrr0(quine, now, 0, cataline_word, quine_cataline_idea).
rrrr0(quine, now, 0, tully_word, quine_tully_idea).
rrrr0(quine, now, 0, tom_word, quine_tom_idea).
rrrr1(quine, now, 1, 1, human_word, quine_human_idea).
rrrr1(quine, now, 1, 1, featherless_biped_word,quine_featherless_biped).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
idea_synonym(quine, now, 0, quine_tully_idea, quine_cicero_idea).
idea_synonym(quine, now, 1, quine_bachelor_idea, quine_unmarried_male_idea).
idea_synonym(tom, now, 1, tom_bachelor_idea, tom_unmarried_male_idea).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Ditto for external relations

%%
%% rrrr(Subject, Time, Type+1, Arity, Word, Idea)
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rrrr1(tom, now, 1, 2, denounced_word, tom_denounced_idea).
rrrr1(tom, now, 1, 1, human_word, tom_human_idea).
rrrr1(tom, now, 1, 1, featherless_biped_word, tom_featherless_biped_idea).
rrrr1(tom, now, 1, 1, american_word, tom_american_idea).
rrrr1(tom, now, 1, 1, roman_word, tom_roman_idea).
rrrr1(tom, now, 2, 2, not_formally_equivalent_word, tom_not_formally_equivalent_idea).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rrrr1(quine, now, 1, 2, denounced_word, quine_denounced_idea).
rrrr1(quine, now, 1, 1, human_word, quine_human_idea).
rrrr1(quine, now, 1, 1, featherless_biped_word, quine_featherless_biped_idea).
rrrr1(quine, now, 1, 1, american_word, quine_american_idea).
rrrr1(quine, now, 1, 1, roman_word, quine_roman_idea).
rrrr1(quine, now, 2, 2, formally_equivalent_word, quine_formally_equivalent_idea).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% There are several understands relations symbols defined in terms of the
%% words and ideas.

%% This solve a problem that some philosophers have if a sentence was never
%% uttered. I only require that there was an internal relation symbol and
%% internal symbols of objects. They never even need to be related or believed. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% believes_internal is the only primitive belief relation needed. I define several others in terms of it. 
%%
%% pos_pos and pos_neg are Logical Forms.
%% pos_pos indicates that the Subject believes
%% that the relation holds among the objects.
%% pos_neg indeicates that the Subject believes
%% that the relation does not hold. 
%%
%% neg_pos indicates that the Subject does not believe that the relation holds.
%% He/her might believe it does not hold
%% - or he/her might have no belief about it at all.
%%
%% Similarly for neg_neg

%% I thing a plain neg is also needed for no belief at all. 

%% I think possibly Logical_Form is where other logical relations such as `or`, `and` etc. would go but I am not doing that.

%% Also nop is just a placeholder to indicate that that position is not used.

%% believes_internal(Subject, Time, Type, Logical_Form, Arity, Relation_Idea, A_Idea, B_Idea, C_Idea, D_Idea, E_Idea, F_Idea, G_Idea, H_Idea, I_Idea, J_Idea)

%%
believes_internal(tom, now, pos_pos, 0, 2, tom_denounced_idea, tom_cicero_idea, tom_cataline_idea, nop).
believes_internal(tom, now, pos_neg, 0, 2, tom_denounced_idea, tom_tully_idea, tom_cataline_idea, nop).
believes_internal(tom, now, pos_pos, 0, 1, tom_human_idea, tom_tully_idea, nop, nop).
believes_internal(quine, now, pos_pos, 0, 2, quine_denounced_idea, quine_cicero_idea, quine_cataline_idea, nop).
believes_internal(quine, now, pos_pos, 0, 2, quine_denounced_idea, quine_tully_idea, quine_cataline_idea, nop).

believes_internal(tom, now, pos_pos, 1, 2, tom_not_formally_equivalent_idea, tom_human_idea, tom_featherless_biped_idea, nop).

believes_internal(quine, now, pos_pos, 1, 2, quine_formally_equivalent_idea, quine_human_idea, quine_featherless_biped_idea, nop).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

believes_believes_internal(quine, now, pos_pos, tom, now, pos_pos, 0, 2, tom_denounced_idea, tom_cicero_idea, tom_cataline_idea, nop).
believes_believes_internal(quine, now, pos_pos, tom, now, pos_neg, 0, 2, tom_denounced_idea, tom_tully_idea, tom_cataline_idea, nop).
believes_believes_internal(quine, now, pos_pos, tom, now, pos_pos, 0, 1, tom_human_idea, tom_tully_idea, nop, nop).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Now, just some plain facts - however the 1st agument corresponds to the Logical Form that would make a belief in the fact true.

human(pos_pos, tom, nop, nop).
human(pos_pos, cicero, nop, nop).
human(pos_pos, cataline, nop, nop).
human_idea(pos_pos, nop, nop, nop).

human_word(pos_pos, tom_word, nop, nop).
human_word(pos_pos, cicero_word, nop, nop).
human_word(pos_pos, cataline_word, nop, nop).
human_word_idea(pos_pos, nop, nop, nop).

featherless_biped(pos_pos, tom, nop, nop).
featherless_biped(pos_pos, cicero, nop, nop).
featherless_biped(pos_pos, cataline, nop, nop).
featherless_biped_idea(pos_pos, nop, nop, nop).

featherless_biped_word(pos_pos, tom_word, nop, nop).
featherless_biped_word(pos_pos, cicero_word, nop, nop).
featherless_biped_word(pos_pos, cataline_word, nop, nop).
featherless_biped_word_idea(pos_pos, nop, nop, nop).

american(pos_pos, tom, nop, nop).
american_idea(pos_pos, nop, nop, nop).

american_word(pos_pos, tom_word, nop, nop).
american_word_idea(pos_pos, nop, nop, nop).

roman(pos_pos, cicero, nop, nop).
roman(pos_pos, cataline, nop, nop).
roman_idea(pos_pos, nop, nop, nop).

roman_word(pos_pos, cicero_word, nop, nop).
roman_word(pos_pos, cataline_word, nop, nop).
roman_word_idea(pos_pos, nop, nop, nop).

arity(human, 1).
arity(featherless_biped, 1).
type(human, 0).
type(featherless_biped, 0).

denounced(pos_pos, cicero, cataline, nop).
denounced(pos_neg, tom, cataline, nop).

denounced_idea(pos_pos, nop, nop, nop).
denounced_idea(pos_neg, nop, nop, nop).

quine_denounced_idea(pos_pos, nop, nop, nop).
quine_denounced_idea(pos_neg, nop, nop, nop).

denounced_idea_word(pos_pos, nop, nop, nop).
quine_human_idea(pos_pos, nop, nop, nop).

quine_featherless_biped_idea(pos_pos, nop, nop, nop).
quine_human_idea(pos_pos, nop, nop, nop).
tom_featherless_biped_idea(pos_pos, nop, nop, nop).
tom_human_idea(pos_pos, nop, nop, nop).

quine_formally_equivalent(pos_pos, nop, nop, nop).
quine_formally_equivalent(neg_pos, nop, nop, nop).
quine_not_formally_equivalent(pos_pos, nop, nop, nop).
quine_not_formally_equivalent(neg_pos, nop, nop, nop).
tom_formally_equivalent(pos_pos, nop, nop, nop).
tom_formally_equivalent(pos_neg, nop, nop, nop).
tom_not_formally_equivalent(pos_pos, nop, nop, nop).
tom_not_formally_equivalent(neg_pos, nop, nop, nop).
