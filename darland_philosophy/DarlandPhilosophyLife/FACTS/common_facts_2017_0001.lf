%% Copyright (C) 2017, 2019 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.


%% Life database for use with predicates 
%% to simulate Dennis J. Darlands philosophy. 
%% Started Writing 1/4/2017
%% Major re-write starting 8/19/2019
%%
%% Total rewite of what I started about 2007.
%%

%% common_facts_2017_0001.lf    %% Facts primarily about understanding

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% conventions.
%% tom, quine, cicero etc stand for people (instances of Subjects or Objects.)
%% There could also be non-animate objects such as a table.
%% there (some would argue) might also be non-human Subjects - such as a dog.
%% tom might have an idea of cicero. This would be represented tom_cicero_idea.
%% The 1st tom indicates that it is tom's idea. cicero indicates that it is an
%% idea of cicero. The final idea indicates that it is an idea.
%% tom might have an word in a shared language for cicero. This is indicated by %% cicero_word. 
%% quine might also an idea quine_cicero_idea of cicero. (note his idea is
%% different). quine might share, however the word cicero_word with tom.

%% words are related to ideas.
%% The words being shared through learning.

%% relates words to ideas.

%% rrrr(Subject, Time, Type, A_word, A_idea)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rrrr(tom, now, 0, cicero_word, tom_cicero_idea).
rrrr(tom, now, 0, catiline_word, tom_catiline_idea).
rrrr(tom, now, 0, tully_word, tom_tully_idea).
rrrr(tom, now, 0, tom_word, tom_tom_idea).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rrrr(quine, now, 0, cicero_word, quine_cicero_idea).
rrrr(quine, now, 0, cicero_word, quine_tully_idea).
rrrr(quine, now, 0, catiline_word, quine_catiline_idea).
rrrr(quine, now, 0, tully_word, quine_tully_idea).
rrrr(quine, now, 0, tully_word, quine_cicero_idea).
rrrr(quine, now, 0, tom_word, quine_tom_idea).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rrrr(tom, now, 1, denounced_word, tom_denounced_idea).
rrrr(tom, now, 1, of_orations_word, tom_of_orations_idea).
rrrr(tom, now, 1, of_De_Senectute_word, tom_of_De_Senectute_idea).
rrrr(tom, now, 1, human_word, tom_human_idea).
rrrr(tom, now, 1, featherless_biped_word, tom_featherless_biped_idea).
rrrr(tom, now, 1, american_word, tom_american_idea).
rrrr(tom, now, 1, roman_word, tom_roman_idea).
rrrr(tom, now, 2, not_formally_equivalent_word, tom_not_formally_equivalent_idea).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rrrr(quine, now, 1, denounced_word, quine_denounced_idea).
rrrr(quine, now, 1, of_orations_word, quine_of_orations_idea).
rrrr(quine, now, 1, of_De_Senectute_word, quine_of_De_Senectute_idea).
rrrr(quine, now, 1, human_word, quine_human_idea).
rrrr(quine, now, 1, featherless_biped_word, quine_featherless_biped_idea).
rrrr(quine, now, 1, american_word, quine_american_idea).
rrrr(quine, now, 1, roman_word, quine_roman_idea).
rrrr(quine, now, 2, formally_equivalent_word, quine_formally_equivalent_idea).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ssss(Subject, Time, Type, A_idea, A_object)
%%
%% there are two ideas for the same person - cicero (tully)
%% but prolog & wild life cannot let two atoms be identical 
%% so the object must be the same for both (cicero)
%%
%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ssss(tom, now, 0, tom_cicero_idea, cicero).
ssss(tom, now, 0, tom_catiline_idea, catiline).
ssss(tom, now, 0, tom_tom_idea, tom).
ssss(tom, now, 1, tom_human_idea, human).
ssss(tom, now, 1, tom_featherless_biped_idea, featherless_biped).
ssss(tom, now, 1, tom_denounced_idea, denounced).
ssss(tom, now, 1, tom_of_orations_idea, of_orations).
ssss(tom, now, 1, tom_of_De_Senectute_idea, of_De_Senectute).
ssss(tom, now, 1, tom_american_idea, american).
ssss(tom, now, 1, tom_roman_idea, roman).
ssss(tom, now, 2, tom_not_formally_equivalent_idea, not_formally_equivalent).
ssss(tom, now, 2, tom_formally_equivalent_idea, formally_equivalent).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ssss(quine, now, 0, quine_cicero_idea, cicero).
ssss(quine, now, 0, quine_tully_idea, cicero).
ssss(quine, now, 0, quine_catiline_idea, catiline).
ssss(quine, now, 0, quine_tom_idea, tom).
ssss(quine, now, 1, quine_human_idea, human).
ssss(quine, now, 1, quine_featherless_biped_idea, featherless_biped).
ssss(quine, now, 1, quine_denounced_idea, denounced).
ssss(quine, now, 1, quine_of_orations_idea, of_orations).
ssss(quine, now, 1, quine_of_De_Senectute_idea, of_De_Senectute).
ssss(quine, now, 1, quine_featherless_biped_idea, featherless_biped).
ssss(quine, now, 1, quine_american_idea, american).
ssss(quine, now, 1, quine_roman_idea, roman).
ssss(quine, now, 2, quine_not_formally_equivalent_idea, not_formally_equivalent).
ssss(quine, now, 2, quine_formally_equivalent_idea, formally_equivalent).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
idea_synonym(quine, now, 0, quine_tully_idea, quine_cicero_idea).
idea_synonym(quine, now, 1, quine_bachelor_idea, quine_unmarried_male_idea).
idea_synonym(tom, now, 1, tom_bachelor_idea, tom_unmarried_male_idea).

%% There are several understands relations symbols defined in terms of the
%% words and ideas.

%% This solve a problem that some philosophers have if a sentence was never
%% uttered. I only require that there was an relation_idea and
%% ideas of objects. They never even need to be related or believed. 

arity_relation(human, 1).
arity_relation(denounced, 2).
arity_word(human_word, 1).
arity_word(denounced_word, 2).
arity_idea(tom_human_idea, 1).
arity_idea(quine_human_idea, 1).
arity_idea(tom_denounced_idea, 2).
arity_idea(quine_denounced_idea, 2).


