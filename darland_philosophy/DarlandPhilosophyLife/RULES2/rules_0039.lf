%% Copyright (C) 2017, 2019, 2020, 2021 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% Common Prolog & Life predicates to simulate Dennis J. Darlands philosophy. 
%% Started Writing 1/4/2017 
%% This is a total rewrite of what I started about 10 years ago.
%% 
%%
%% I have made the propositional attitude relatons support arbitrary arity.
%%
%%
%% qqqq is the only relation having ontological status.
%% qqqq is the exemplification of a universal in the following arguments.

%% some possible arguments (universals) are rrrr, ssss, and rrss.
%% rrss is defined in terms of rrrr and ssss.
%% rrrr and ssss are undefined here
%% - but not neverssarily ontologically primitive 

%% rrrr is relation between word and idea.
%% ssss is relation between idea and object.

%% rrss is relative product of rrrr and ssss.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% tttt2 requires uniqueness
%% uniqueness is essential to singular ideas
%% So it is required even for understanding or belief if ssss is used

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% we need to define existence, equality, and functions of singular terms
%% 
%% There are 7 relations of both each

%% The 7 cases are:

%% 1 words
%% 2 ideas
%% 3 objects

%% 4 words_ideas
%% 5 words_objects
%% 6 ideas_objects

%% 7 words_ideas_objects

%% Modified to add Number to ideas
%%	- singular
%%      - or plural

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% It applies to an intelligent Subject at some Time.
%% There is a list of words.
%% The arity_idea must match the number of words following the relation word.
%% (Or an arity_relation of -999 matches any number of words.)
%% The type ideas corresponding to the words must be one less thasn the type 
%% idea corresponding to the relation idea.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 
%% 1
%% only guarantees word & idea exist

exists_contingently_singular_word(Subject, Time, Word) :-
	rrrr(Subject, Time, Word, Idea),
	number_idea(Idea, plural).


%% 2
%% only quarantees singular idea exists 

exists_contingently_singular_idea(Subject, Time, Idea) :-
	number_idea(Idea, plural).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

%% 3
%% Guarantees Object with Idea exists

exists_contingently_singular_object(Subject, Time, Object) :-
	tttt2(Subject, Time, Idea, Object),
	number_idea(Idea, plural).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 4
%% guarantees word and idea

exists_contingently_singular_word_idea(Subject, Time, Word, Idea) :-
	rrrr(Subject, Time, Word, Idea),
	number_idea(Idea, plural).
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 5
%% guarantees word & object

exists_contingently_singular_word_object(Subject, Time, Word, Object) :-
	rrrr(Subject, Time, Word, Idea),
	number_idea(Idea, plural),
	tttt2(Subject, Time, Idea, Object).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 6
%% guarantees idea & object

exists_contingently_singular_idea_object( Subject, Time, Idea, Object) :-
	% List of Word Object Pairs.
	tttt2(Subject, Time, Idea, Object),
	number_idea(Idea, plural).
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7
%% 
exists_contingently_singular_word_idea_object(Subject, Time, Word, Idea, Object) :-
	% List of Word Idea_Object Triples.
	rrrr(Subject, Time, Word, Idea),
	number_idea(Idea, plural),
	tttt2(Subject, Time, Idea, Object).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% now equality -- only applies with object specified
%% 1
%% NA

%% 2
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

%% 3
%% Guarantees Object with Idea exists

equal_contingently_singular_objects(Subject, Time, Object1, Object2) :-
	tttt2(Subject, Time, Idea1, Object1),
	tttt2(Subject, Time, Idea2, Object2),
	number_idea(Idea1, plural),
	number_idea(Idea2, plural),
	Object1 :== Object2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 4
%% NA
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 5
%% guarantees word & object

equal_contingently_singular_words_objects(Subject, Time, Word1, Word2, Object1, Object2) :-
	rrrr(Subject, Time, Word1, Idea1),
	rrrr(Subject, Time, Word2, Idea2),
	number_idea(Idea1, plural),
	number_idea(Idea2, plural),
	tttt2(Subject, Time, Idea1, Object1),
	tttt2(Subject, Time, Idea2, Object2),
	Object1 :== Object2.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 6
%% guarantees idea & object

equal_contingently_singular_ideas_objects( Subject, Time, Idea1, Idea2, Object1, Object2) :-
	% List of Word Object Pairs.
	tttt2(Subject, Time, Idea1, Object1),
	tttt2(Subject, Time, Idea2, Object2),
	number_idea(Idea1, plural),
	number_idea(Idea2, plural),
	Object1 :== Object2.
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7
%% 
equal_contingently_singular_words_ideas_objects(Subject, Time, Word1, Word2,
				   Idea1, Idea2,
				   Object1, Object2) :-
	% List of Word Idea_Object Triples.
	rrrr(Subject, Time, Word1, Idea1),
	rrrr(Subject, Time, Word2, Idea2),
	number_idea(Idea1, plural),
	number_idea(Idea2, plural),
	tttt2(Subject, Time, Idea1, Object1),
	tttt2(Subject, Time, Idea2, Object2),
	Object1 :== Object2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% now functions -- only applies with object specified
%% 1
%% NA

%% 2
%% NA

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

%% 3
%% Guarantees Object exists

function_contingently_singular_object(Subject, Time, Function, Object) :-
	tttt2(Subject, Time, Function_Idea, Function),
	tttt2(Subject, Time, Idea, Object),
	number_idea(Function_Idea, plural),
	number_idea(Idea, plural),
	qqqq4([Function, Object]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 4
%% NA
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 5
%% guarantees word & object

function_contingently_singular_word_object(Subject, Time, Function_Word, Word, Object) :-
	rrrr(Subject, Time, Function_Word, Function_Idea),
	rrrr(Subject, Time, Word, Idea),
	number_idea(Function_Idea, plural),
	number_idea(Idea, plural),
	tttt2(Subject, Time, Function_Idea, Function),
	tttt2(Subject, Time, Idea, Object),
	qqqq4([Function, Object]).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 6
%% guarantees idea & object

function_contingently_singular_idea_object( Subject, Time, Function_Idea, Idea, Object) :-
	% List of Word Object Pairs.
	tttt2(Subject, Time, Function_Idea, Function),
	tttt2(Subject, Time, Idea, Object),
	number_idea(Function_Idea, plural),
	number_idea(Idea, plural),
	qqqq4([Function, Object]).
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 7
%% 
function_contingently_singular_word_idea_object(Subject, Time,
				      Function_Word, Word, Idea, Object) :-
	% List of Word Idea_Object Triples.
	rrrr(Subject, Time, Function_Word, Function_Idea),
	rrrr(Subject, Time, Word, Idea),
	number_idea(Function_Idea, plural),
	number_idea(Idea, plural),
	tttt2(Subject, Time, Function_Idea, Function),
	tttt2(Subject, Time, Idea, Object),
	qqqq4([Function, Object]).


