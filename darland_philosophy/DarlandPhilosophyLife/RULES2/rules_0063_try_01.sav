%% Copyright (C) 2017, 2019, 2020, 2021 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% Common Prolog & Life predicates to simulate Dennis J. Darlands philosophy. 
%% Started Writing 1/4/2017 
%% This is a total rewrite of what I started about 10 years ago.

%% This is to experiment with Satisfiability.
%% It is an NP-complete problem
%% See pages 320-331 in
%% _Introduction to Automata Theory, Languages and Computation_
%% By John E. Hopcroft
%% and
%% Jefferey D. Ullman

%% First convert a boolean expression to nand using Polish notation.
%% It looks to me like a binary search. So should be polynomial time!!!


boolean(A, [top, 0]).
boolean(A, [top, 1]).

satisfiable(List) :-
	First = true,
	write("List = ",List),
	sat(List, Dep, First),
	write("List = ",List),
	write("dep = ", Dep).


diff(X, X) -> fail.
diff(X, Y) -> succeed.

sat(Prop_1) :-
	Prop_1 = [top, 1].

% sat([nand, [top, 0], [top, 0]]).
% sat([nand, [top, 1], [top, 0]]).
% sat([nand, [top, 0], [top, 1]]).

%% A
sat([nand, [top, 0], Prop_2], Dep) :-
	boolean(Prop_2).

%% B
sat([nand, Prop_1, [top, 0]], Dep) :-
	boolean(Prop_1).

%% C
sat([nand, [nand, Prop_1, Prop_2], Prop_3], Dep) :-
	boolean(Prop_1),
	boolean(Prop_2),
	cond(First, (Dep=>Prop_1 = true, Dep=>Prop_2 = true)),
	cond((Dep=>Prop_1 or Dep=>Prop_2),
	     cond(\+ sat([nand, Prop_1, Prop_2]),
		  (Dep=>Prop_1 = true,
		   Dep=>Prop_2 = true))).


%% D
sat([nand, [nand, Prop_1, Prop_2], Prop_3, Dep]) :-
	boolean(Prop_3),
	cond((Dep=>Prop_3),
	     cond(\+ sat(Prop_3),
		  Dep=>Prop_3 = true)).
%% E
sat([nand, Prop_1, [nand, Prop2, Prop_3]], Dep) :-
	boolean(Prop_1),
	cond((Dep=>Prop_1),
	     cond(\+ sat(Prop_1),
		  Dep=>Prop_1 = true)).

%% F	
sat([nand, Prop_1, [nand, Prop2, Prop_3]], Dep) :-
	boolean(Prop_2),
	boolean(Prop_3),
	cond((Dep=>Prop_2 or Dep=>Prop_3),
	     cond(\+ sat([nand, Prop_2, Prop_3]),
		  (Dep=>Prop_2 = true,
		   Dep=>Prop_3 = true))).

	
