% Copyright (C) 2017, 2019, 2020, 2021 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% Common Prolog & Life predicates to simulate Dennis J. Darlands philosophy. 
%% Started Writing 1/4/2017 
%% This is a total rewrite of what I started about 10 years ago.
%% 
%%
%%
%%

%%    There are only two soets of primitive sort of belief - in ideas

%%    believes_in_ideas( Subject, Time,
%%		      [Relation_Idea,
%%		      A_Idea,
%%		      B_Idea,
%%		      C_Idea, ... ])

%%    disbelieves_in_ideas( Subject, Time,
%%		      [Relation_Idea,
%%		      A_Idea,
%%		      B_Idea,
%%		      C_Idea, ... ])

%% The Subject at Time has a belief relation between the Relation_Idea and
%% The following Ideas.

%% There are 7 relations of both belief and belief_not.
%% Those of understanding are defined in terms of rrrr and ssss
%% Those of belief require also a belief_in_ideas relation.

%% The 7 cases are:

%% 1 words
%% 2 ideas
%% 3 objects

%% 4 words_ideas
%% 5 words_objects
%% 6 ideas_objects

%% 7 words_ideas_objects


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 2

%% top

%% believes_true_in_ideas -- which all others use

believes_true_in_ideas( Subject, Time, [top, Idea_List]) :-
	believes_in_ideas( Subject, Time, Idea_List),
	Idea_List_Save = Idea_List,
	believes_true_in_ideas2( Subject, Time,
				 [top, Idea_List, Idea_List_Save]).

believes_true_in_ideas( Subject, Time, [nand, Idea_List_1, Idea_List_2]) :-
	Idea_List_Save_1 = Idea_List_1,
	Idea_List_Save_2 = Idea_List_2,
	believes_true_in_ideas3( Subject, Time,
				  [nand,
				   Idea_List_1, Idea_List_Save_1,
				   Idea_List_2, Idea_List_Save_2]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A

believes_true_in_ideas3( Subject, Time,
			 [nand,
			  Idea_List_1, Idea_List_Save_1,
			  Idea_List_2, Idea_List_Save_2]) :-
	write(believes_true_in_ideas_A),
	Idea_List_Save_1 = Idea_List_1,
	\+ believes_true_in_ideas2( Subject, Time,
				    [top, Idea_List_1, Idea_List_Save_1]).
%% B 
believes_true_in_ideas3( Subject, Time,
			 [nand,
			  Idea_List_1, Idea_List_Save_1,
			  Idea_List_2, Idea_List_Save_2]) :-
	write(believes_true_in_ideas_B),
	Idea_List_Save_2 = Idea_List_2,
	\+ believes_true_in_ideas2( Subject, Time,
				 [top, Idea_List_2, Idea_List_Save_2]).

%% C

believes_true_in_ideas3( Subject, Time,
			 [nand,
			  [nand,
			   Idea_List_1, Idea_List_Save_1,
			   Idea_List_2, Idea_List_Save_2],
			  [top, Idea_List_3, Idea_List_Save_3]]) :-
	write(believes_true_in_ideas_C),
	\+ believes_true_in_ideas3( Subject, Time,
				    [nand,
				     Idea_List_1, Idea_List_Save_1,
				     Idea_List_2, Idea_List_Save_2]).

%% D
believes_true_in_ideas3( Subject, Time,
			 [nand,
			  [nand,
			   Idea_List_1, Idea_List_Save_1,
			   Idea_List_2, Idea_List_Save_2],
			  [top, Idea_List_3, Idea_List_Save_3]]) :-
	write(believes_true_in_ideas_D),
	\+ believes_true_in_ideas3( Subject, Time,
				    [top ,
				     Idea_List_3, Idea_List_Save_3]).


%% E
believes_true_in_ideas3( Subject, Time,
			 [nand, Idea_List_1, Idea_List_Save_1,
			  [nand,
			   Idea_List_2, Idea_List_Save_2,
			   Idea_List_3, Idea_List_Save_3]]) :-
	write(believes_true_in_ideas_E),
	\+ believes_true_in_ideas3( Subject, Time,
				    [top,
				     Idea_List_1, Idea_List_Save_1]).

%% F
believes_true_in_ideas3( Subject, Time,
			 [nand, Idea_List_1, Idea_List_Save_1,
			  [nand,
			   Idea_List_2, Idea_List_Save_2,
			   Idea_List_3, Idea_List_Save_3]]) :-
	write(believes_true_in_ideas_F),
	\+ believes_true_in_ideas3( Subject, Time,
				    [nand,
				     Idea_List_2, Idea_List_Save_2,
				     Idea_List_3, Idea_List_Save_3]).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	

believes_true_in_ideas2( Subject, Time, [top, [Relation_Idea | Idea_List], Idea_List_Save]) :-
	number_idea(Relation_Idea, singular),
	ssss2(Subject, Time, Relation_Idea, Relation),
	match_true_ideas_objects(Subject, Time, Idea_List , [Relation], Idea_List_Save).

believes_true_in_ideas2( Subject, Time, [top, [Relation_Idea | Idea_List], Idea_List_Save]) :-
	number_idea(Relation_Idea, plural),
	tttt(Subject, Time, Relation_Idea, Relation),
	match_true_ideas_objects(Subject, Time, Idea_List , [Relation], Idea_List_Save).

match_true_ideas_objects(Subject, Time, [], Object_List, Idea_List_Save) :-
	believes_in_ideas( Subject, Time, Idea_List_Save),
	qqqq4(Object_List).  %% qqqq4 indicates fact
	
match_true_ideas_objects(Subject, Time, [Idea | Idea_List], Object_List, Idea_List_Save) :-
	number_idea(Idea, singular),
	ssss2(Subject, Time, Idea, Object),
	Object_List_Out = append(Object_List, [Object]),
	match_true_ideas_objects(Subject, Time, Idea_List , Object_List_Out, Idea_List_Save).
	
match_true_ideas_objects(Subject, Time, [Idea | Idea_List], Object_List, Idea_List_Save) :-
	number_idea(Idea, plural),
	tttt(Subject, Time, Idea, Object),
	Object_List_Out = append(Object_List, [Object]),
	match_true_ideas_objects(Subject, Time, Idea_List , Object_List_Out, Idea_List_Save).
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 1

%% top

believes_true_words( Subject, Time, [top, [[Relation_Word] | List]]) :-
	%% list of words
	rrrr( Subject, Time, Relation_Word, Relation_Idea),
	arity_idea( Relation_Idea, Arity),
	type_idea( Relation_Idea, Type),
	match_true_word_belief(Subject, Time, List,
			  Arity, Type - 1, [Relation_Idea]).

%% A

believes_true_words( Subject, Time, [nand, List_1, List_2]) :-
	
	write(believes_true_wordsA),
	\+ believes_true_words( Subject, Time, [top, List_1]).

%% B

believes_true_words( Subject, Time, [nand, List_1, List_2]) :-
	write(believes_true_wordsB),
	\+ believes_true_words( Subject, Time, [top, List_2]).

%% C

believes_true_words( Subject, Time, [nand, [nand, List_1, List_2], List_3]) :-
	write(believes_true_wordsC),
	\+ believes_true_words( Subject, Time, [nand, List_1, List_2]).

%% D

believes_true_words( Subject, Time, [nand, [nand, List_1, List_2], List_3]) :-
	write(believes_true_wordsD),
	\+ believes_true_words( Subject, Time, [top, List_3]).

%% E

believes_true_words( Subject, Time, [nand, List_1, [nand, List_2, List_3]]) :-
	write(believes_true_wordsE),
	\+ believes_true_words( Subject, Time, [top, List_1]).

%% F

believes_true_words( Subject, Time, [nand, List_1, [nand, List_2, List_3]]) :-
	write(believes_true_wordsF),
	\+ believes_true_words( Subject, Time, [nand, List_2, List_3]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
match_true_word_belief(Subject, Time, [], 0, Type, Idea_List) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

%% -999 indicates arbitrary arity.
match_true_word_belief(Subject, Time, [], -999, Idea_List) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

match_true_word_belief(Subject, Time,
		  [[Word] | List],
		  Arity, Type, Idea_List) :-
	% List of Word Idea Pair.
	rrrr( Subject, Time, Word, Idea),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_word_belief(Subject, Time,
			  List,
			  % if Arity is not Arbitrary sub 1
			  cond(Arity =\= -999, Arity - 1,
			       -999),
			  Type, Idea_List_Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 3

%% top singular

believes_true_objects( Subject, Time, [top, [[Relation] | List]]) :-
	%% list of idea object Pairs
	number_idea(Relation_Idea, singular),
	ssss2( Subject, Time, Relation_Idea, Relation),
	arity_idea( Relation_Idea, Arity),
%	(Arity =:= length(List) or Arity =:= -999),  
	type_idea( Relation_Idea, Type),
	match_true_object_belief(Subject, Time, List,
			    Arity, Type - 1, [Relation_Idea]).

%% top plural

believes_true_objects( Subject, Time, [top, [[Relation] | List]]) :-
	%% list of idea object Pairs
	number_idea(Relation_Idea, plural),
	tttt( Subject, Time, Relation_Idea, Relation),
	arity_idea( Relation_Idea, Arity),
%	(Arity =:= length(List) or Arity =:= -999),  
	type_idea( Relation_Idea, Type),
	match_true_object_belief(Subject, Time, List,
			    Arity, Type - 1, [Relation_Idea]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A
believes_true_objects( Subject, Time, [nand, List_1, List_2] ) :-
	write(believes_true_objects_A),
	\+ believes_true_objects( Subject, Time, [top, List_1]).

%% B
believes_true_objects( Subject, Time, [nand, List_1, List_2] ) :-
	write(believes_true_objects_B),
	\+ believes_true_objects( Subject, Time, [top, List_2]).

%% C
believes_true_objects( Subject, Time, [nand, [nand, List_1, List_2], List_3] ) :-
	write(believes_true_objects_C),
	\+ believes_true_objects( Subject, Time, [nand, List_1, List_2]).

%% D
believes_true_objects( Subject, Time, [nand, [nand, List_1, List_2], List_3] ) :-
	write(believes_true_objects_D),
	\+ believes_true_objects( Subject, Time, [top, List_3]).

%% E
believes_true_objects( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_objects_E),
	\+ believes_true_objects( Subject, Time, [top, List_1]).

%% F
believes_true_objects( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_objects_F),
	\+ believes_true_objects( Subject, Time, [nand, List_2, List_3]).

%% list of idea object Pairs
	
match_true_object_belief(Subject, Time, [], 0, Type, Idea_List) :- 
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

%% -999 indicates arbitrary arity.
match_true_object_belief(Subject, Time, [], -999, Idea_List) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

match_true_object_belief(Subject, Time,
		    [[Object] | List],
		    Arity, Type, Idea_List) :-
	% List of Objects.
	number_idea(Idea, singular),
	ssss2( Subject, Time, Idea, Object),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_object_belief(Subject, Time,
			    List,
			    % if Arity is not Arbitrary sub 1
			    cond(Arity =\= -999, Arity - 1,
				 -999),
			    Type, Idea_List_Out).

match_true_object_belief(Subject, Time,
		    [[Object] | List],
		    Arity, Type, Idea_List) :-
	% List of Objects.
	number_idea(Idea, plural),
	tttt( Subject, Time, Idea, Object),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_object_belief(Subject, Time,
			    List,
			    % if Arity is not Arbitrary sub 1
			    cond(Arity =\= -999, Arity - 1,
				 -999),
			    Type, Idea_List_Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 4

believes_true_words_ideas( Subject, Time, [top, [[Relation_Word, Relation_Idea] | PairList]]) :-
	write(believes_true_words_ideasA),
	%% list of word, idea pairs
	rrrr( Subject, Time, Relation_Word, Relation_Idea),
	number_idea(Relation_Idea, singular),
	ssss2( Subject, Time, Relation_Idea, Relation),
	arity_idea( Relation_Idea, Arity),
	type_idea( Relation_Idea, Type),
	match_true_word_idea_belief(Subject, Time, PairList,
			       Arity, Type - 1, [Relation_Idea]).

believes_true_words_ideas( Subject, Time, [top, [[Relation_Word, Relation_Idea] | PairList]]) :-
	write(believes_true_words_ideasB),
	%% list of word, idea pairs
	rrrr( Subject, Time, Relation_Word, Relation_Idea),
	number_idea(Relation_Idea, plural),
	tttt( Subject, Time, Relation_Idea, Relation),
	arity_idea( Relation_Idea, Arity),
	type_idea( Relation_Idea, Type),
	match_true_word_idea_belief(Subject, Time, PairList,
			       Arity, Type - 1, [Relation_Idea]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% > believes_true_words_ideas( tom, now,
% |         [nand, 
% |          [[denounced_word, tom_denounced_idea],
% |           [cicero_word, tom_cicero_idea],
% |           [catiline_word, tom_catiline_idea]],
% |          [[denounced_word, tom_denounced_idea],
% |           [cicero_word, tom_cicero_idea],
% |           [catiline_word, tom_catiline_idea]]])?

%% A

believes_true_words_ideas( Subject, Time, [nand, List_1, List_2] ) :-
	write(believes_true_words_ideas_A),
	\+ believes_true_words_ideas( Subject, Time, [top, List_1]).

%% B
believes_true_words_ideas( Subject, Time, [nand, List_1, List_2] ) :-
	write(believes_true_words_ideas_B),
	\+ believes_true_words_ideas( Subject, Time, [top, List_2]).

%% C
believes_true_words_ideas( Subject, Time, [nand, [nand, List_1, List_2], List_3] ) :-
	write(believes_true_words_ideas_C),
	\+ believes_true_words_ideas( Subject, Time, [nand, List_1, List_2]).

%% D
believes_true_words_ideas( Subject, Time, [nand, [nand, List_1, List_2], List_3] ) :-
	write(believes_true_words_ideas_D),
	\+ believes_true_words_ideas( Subject, Time, [top, List_3]).

%% E
believes_true_words_ideas( Subject, Time, [nand, List_1, [nand, List_2, List_3]]) :-
	write(believes_true_words_ideas_E),
	\+ believes_true_words_ideas( Subject, Time, [top, List_1]).

%% F
believes_true_words_ideas( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_words_ideas_F),
	\+ believes_true_words_ideas( Subject, Time, [nand, List_2, List_3]).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
match_true_word_idea_belief(Subject, Time, [], 0, Type, Idea_List) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

%% -999 indicates arbitrary arity.
match_true_word_idea_belief(Subject, Time, [], -999, Idea_List) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

match_true_word_idea_belief(Subject, Time,
		       [[Word, Idea] | PairList],
		       Arity, Type, Idea_List) :-
	
	% List of Word Idea Object Triple.
	rrrr( Subject, Time, Word, Idea),
	number_idea(Idea, singular),
	ssss2( Subject, Time, Idea, Object),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_word_idea_belief(Subject, Time,
			       PairList,
			       % if Arity is not Arbitrary sub 1
			       cond(Arity =\= -999, Arity - 1,
				    -999),
			       Type, Idea_List_Out).

match_true_word_idea_belief(Subject, Time,
		       [[Word, Idea] | PairList],
		       Arity, Type, Idea_List) :-
	% List of Word Idea Object Triple.
	rrrr( Subject, Time, Word, Idea),
	number_idea(Idea, plural),
	tttt( Subject, Time, Idea, Object),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_word_idea_belief(Subject, Time,
			       PairList,
			       % if Arity is not Arbitrary sub 1
			       cond(Arity =\= -999, Arity - 1,
				    -999),
			       Type, Idea_List_Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 5

believes_true_words_objects( Subject, Time, [top, [[Relation_Word, Relation] | Pair_List]]) :-
	%% list of word, idea object pairs
	rrrr( Subject, Time, Relation_Word, Relation_Idea),
	number_idea(Relation_Idea, singular),
	ssss2( Subject, Time, Relation_Idea, Relation),
	arity_idea( Relation_Idea, Arity),
	type_idea( Relation_Idea, Type),
	match_true_word_object_belief(Subject, Time, Pair_List,
			       Arity, Type - 1, [Relation_Idea]).

believes_true_words_objects( Subject, Time, [top, [[Relation_Word, Relation] | Pair_List]]) :-
	%% list of word, idea object pairs
	rrrr( Subject, Time, Relation_Word, Relation_Idea),
	number_idea(Relation_Idea, plural),
	tttt( Subject, Time, Relation_Idea, Relation),
	arity_idea( Relation_Idea, Arity),
	type_idea( Relation_Idea, Type),
	match_true_word_object_belief(Subject, Time, Pair_List,
			       Arity, Type - 1, [Relation_Idea]).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A
believes_true_words_objects( Subject, Time, [nand, List_1, List_2] ) :-
	write(believes_true_words_objects_A),
	\+ believes_true_words_objects( Subject, Time, [top, List_1]).

%% B
believes_true_words_objects( Subject, Time, [nand, List_1, List_2] ) :-
	write(believes_true_words_objects_B),
	\+ believes_true_words_objects( Subject, Time, [top, List_2]).

%% C
believes_true_words_objects( Subject, Time, [nand, [nand, List_1 ,List_2], List_3] ) :-
	write(believes_true_words_objects_C),
	\+ believes_true_words_objects( Subject, Time, [nand, List_1, List_2]).

%% D
believes_true_words_objects( Subject, Time, [nand, [nand, List_1, List_2], List_3] ) :-
	write(believes_true_words_objects_D),
	\+ believes_true_words_objects( Subject, Time, [top, List_3]).

%% E
believes_true_words_objects( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_words_objects_E),
	\+ believes_true_words_objects( Subject, Time, [top, List_1]).

%% F
believes_true_words_objects( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_words_objects_F),
	\+ believes_true_words_objects( Subject, Time, [nand, [[Relation_2] | List_2],[nand, [[Relation_3] | List_3]]]).





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
match_true_word_object_belief(Subject, Time, [], 0, Type, Idea_List) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

%% -999 indicates arbitrary arity.
match_true_word_object_belief(Subject, Time, [], -999, [top, Idea_List]) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

match_true_word_object_belief(Subject, Time,
			 [[Word, Object] | Pair_List],
			 Arity, Type, Idea_List) :-
	% List of Word Idea Object Triple.
	rrrr( Subject, Time, Word, Idea),
	number_idea(Idea, singular),
	ssss2( Subject, Time, Idea, Object),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_word_object_belief(Subject, Time,
				 Pair_List,
				 % if Arity is not Arbitrary sub 1
				 cond(Arity =\= -999, Arity - 1,
				      -999),
				 Type, Idea_List_Out).

match_true_word_object_belief(Subject, Time,
			 [[Word, Object] | Pair_List],
			 Arity, Type, Idea_List) :-
	% List of Word Idea Object Triple.
	rrrr( Subject, Time, Word, Idea),
	number_idea(Idea, plural),
	tttt( Subject, Time, Idea, Object),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_word_object_belief(Subject, Time,
				 Pair_List,
				 % if Arity is not Arbitrary sub 1
				 cond(Arity =\= -999, Arity - 1,
				      -999),
				 Type, Idea_List_Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 6

believes_true_ideas_objects(Subject, Time, [top, [[Relation_Idea, Relation] | PairList]]) :-
	%% list of word, idea object triples
	number_idea(Relation_Idea, singular),
	ssss2(Subject, Time, Relation_Idea, Relation),
	arity_idea(Relation_Idea, Arity),
	type_idea(Relation_Idea, Type),
	match_true_idea_object_belief(Subject, Time, PairList,
				 Arity, Type - 1, [Relation_Idea]).

believes_true_ideas_objects(Subject, Time, [top, [[Relation_Idea, Relation] | PairList]]) :-
	%% list of word, idea object triples
	number_idea(Relation_Idea, plural),
	tttt(Subject, Time, Relation_Idea, Relation),
	arity_idea(Relation_Idea, Arity),
	type_idea(Relation_Idea, Type),
	match_true_idea_object_belief(Subject, Time, PairList,
				 Arity, Type - 1, [Relation_Idea]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A
believes_true_ideas_objects( Subject, Time, [nand, [List_1, List_2]] ) :-
	write(believes_true_ideas_objects_A),
	\+ believes_true_ideas_objects( Subject, Time, [top, List_1]).

%% B
believes_true_ideas_objects( Subject, Time, [nand, [List_1, List_2]] ) :-
	write(believes_true_ideas_objects_B),
	\+ believes_true_ideas_objects( Subject, Time, [top, List_2]).

%% C
believes_true_ideas_objects( Subject, Time, [nand, [nand, List_1, List_2], List_3] ) :-
	write(believes_true_ideas_objects_C),
	\+ believes_true_ideas_objects( Subject, Time, [nand, List_1, List_2]).

%% D
believes_true_ideas_objects( Subject, Time, [nand, [nand, List_1, List_2], List_3] ) :-
	write(believes_true_ideas_objects_D),
	\+ believes_true_ideas_objects( Subject, Time, [top, List_3]).

%% E
believes_true_ideas_objects( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_ideas_objects_E),
	\+ believes_true_ideas_objects( Subject, Time, [top, List_1]).

%% F
believes_true_ideas_objects( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_ideas_objects_F),
	\+ believes_true_ideas_objects( Subject, Time, [nand, List_2, List_3]).





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

match_true_idea_object_belief(Subject, Time, [], 0, Type, Idea_List) :-
	believes_true_in_ideas(Subject, Time, [top, Idea_List]).

%% -999 indicates arbitrary arity.
match_true_idea_object_belief(Subject, Time, [], Arity, Idea_List) :-
	Arity =:= -999,
	believes_true_in_ideas(Subject, Time, [top, Idea_List]).



match_true_idea_object_belief(Subject, Time,
			 [[Idea, Object] | PairList],
			 Arity, Type, Idea_List) :-
	% List of Word Idea Object Triple.
	number_idea(Relation_Idea, singular),
	ssss2(Subject, Time, Idea, Object),
	type_idea(Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	Arity > 0,
	match_true_idea_object_belief(Subject, Time,
				 PairList,
				 % if Arity is not Arbitrary sub 1
				 cond(Arity =\= -999, Arity - 1,
				      -999),
				 Type, Idea_List_Out).

match_true_idea_object_belief(Subject, Time,
			 [[Idea, Object] | PairList],
			 Arity, Type, Idea_List) :-
	% List of Word Idea Object Triple.
	number_idea(Relation_Idea, plural),
	tttt(Subject, Time, Idea, Object),
	type_idea(Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	Arity > 0,
	match_true_idea_object_belief(Subject, Time,
				 PairList,
				 % if Arity is not Arbitrary sub 1
				 cond(Arity =\= -999, Arity - 1,
				      -999),
				 Type, Idea_List_Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 7

believes_true_words_ideas_objects( Subject, Time, [top, [[Relation_Word, Relation_Idea, Relation] | TripleList]]) :-
	%% list of word, idea object triples
	rrrr( Subject, Time, Relation_Word, Relation_Idea),
	number_idea(Relation_Idea, singular),
	ssss2( Subject, Time, Relation_Idea, Relation),
	arity_idea( Relation_Idea, Arity),
	type_idea( Relation_Idea, Type),
	match_true_triple_word_idea_object_belief(Subject, Time, TripleList,
					     Arity, Type - 1, [Relation_Idea]).

believes_true_words_ideas_objects( Subject, Time, [top, [[Relation_Word, Relation_Idea, Relation] | TripleList]]) :-
	%% list of word, idea object triples
	rrrr( Subject, Time, Relation_Word, Relation_Idea),
	number_idea(Relation_Idea, plural),
	tttt( Subject, Time, Relation_Idea, Relation),
	arity_idea( Relation_Idea, Arity),
	type_idea( Relation_Idea, Type),
	match_true_triple_word_idea_object_belief(Subject, Time, TripleList,
					     Arity, Type - 1, [Relation_Idea]).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A
believes_true_words_ideas_objects( Subject, Time, [nand, List_1, List_2] ) :-
	write(believes_true_words_ideas_objects_A),
	\+ believes_true_words_ideas_objects( Subject, Time, [top, List_1]).

%% B
believes_true_words_ideas_objects( Subject, Time, [nand, List_1, List_2] ) :-
	write(believes_true_words_ideas_objects_B),
	\+ believes_true_words_ideas_objects( Subject, Time, [top, List_2]).

%% C
believes_true_words_ideas_objects( Subject, Time, [nand, [nand, List_1, List_2], List_3] ) :-
	write(believes_true_words_ideas_objects_C),
	\+ believes_true_words_ideas_objects( Subject, Time, [nand, List_1 ,List_2]).

%% D
believes_true_words_ideas_objects( Subject, Time, [nand, [nand, List_1, List_2],List_3] ) :-
	write(believes_true_words_ideas_objects_D),
	\+ believes_true_words_ideas_objects( Subject, Time, [top, List_3]).

%% E
believes_true_words_ideas_objects( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_words_ideas_objects_E),
	\+ believes_true_words_ideas_objects( Subject, Time, [top, List_1]).

%% F
believes_true_words_ideas_objects( Subject, Time, [nand, List_1, [nand, List_2, List_3]] ) :-
	write(believes_true_words_ideas_objects_F),
	\+ believes_true_words_ideas_objects( Subject, Time, [nand, List_2 ,List_3]).




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
match_true_triple_word_idea_object_belief(Subject, Time, [], 0, Type, Idea_List) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

%% -999 indicates arbitrary arity.
match_true_triple_word_idea_object_belief(Subject, Time, [], -999, Idea_List) :-
	believes_true_in_ideas( Subject, Time, [top, Idea_List]).

match_true_triple_word_idea_object_belief(Subject, Time,
				     [[Word, Idea, Object] | TripleList],
				     Arity, Type, Idea_List) :-
	% List of Word Idea Object Triple.
	rrrr( Subject, Time, Word, Idea),
	number_idea(Idea, singular),
	ssss2( Subject, Time, Idea, Object),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_triple_word_idea_object_belief(Subject, Time,
					     TripleList,
					     % if Arity is not Arbitrary sub 1
					     cond(Arity =\= -999, Arity - 1,
						  -999),
					     Type, Idea_List_Out).

match_true_triple_word_idea_object_belief(Subject, Time,
				     [[Word, Idea, Object] | TripleList],
				     Arity, Type, Idea_List) :-
	% List of Word Idea Object Triple.
	rrrr( Subject, Time, Word, Idea),
	number_idea(Idea, plural),
	tttt( Subject, Time, Idea, Object),
	type_idea( Idea, Type),
	Idea_List_Out = append(Idea_List, [Idea]),
	match_true_triple_word_idea_object_belief(Subject, Time,
					     TripleList,
					     % if Arity is not Arbitrary sub 1
					     cond(Arity =\= -999, Arity - 1,
						  -999),
					     Type, Idea_List_Out).


