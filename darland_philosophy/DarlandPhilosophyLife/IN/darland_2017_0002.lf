%% Copyright (C) 2017 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% This file only checks rules (relating to understanding as I define it). 
%% In WildLife queries end in question mark - in Prolog in a period.
%%
%% In Wilidife extra ";" are echoed but otherwise ignored - in Prolog they 
%% cause errors.
%%

 
 
 
 
 

load("FACTS/common_facts_2017_0001.lf")?
load("FACTS/common_facts_2017_0002.lf")?
load("RULES/common_2017_0001.lf")?
load("RULES/life_2017_0001.lf")?
trace_input(true)?

write_time(Ignore)?

remark(2001, Remark)?

remark(2002, Remark)?

quote_note(br0006, Author, Author_Article, Author_Book, Article_Title, Book_Title, Pages, Quotation, Article_Year, Book_Year, Note1, Notes_Article, Notes_Book)?

quote_note(br0007, Author, Author_Article, Author_Book, Article_Title, Book_Title, Pages, Quotation, Article_Year, Book_Year, Note1, Notes_Article, Notes_Book)?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% understands_external_internal_object(Subject, Time, 0, Arity, External_Relation_Symbol, Internal_Relation_Symbol, Relation, A_External_Symbol, A_Object, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, B_Object, C_External_Symbol, C_Internal_Symbol, C_Object)?
%% This is for type 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simple query for this is: (and continued by semi-colons)

understands_external_internal_object(Subject, Time, 0, Arity, External_Relation_Symbol, Internal_Relation_Symbol, Relation, A_External_Symbol, A_Object, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, B_Object, C_External_Symbol, C_Internal_Symbol, C_Object)?
;
;
;
%


%% One would get too many results if one tried to list all of them!

%% next follow higher types (now some for type 1 - work on intension & extension).

understands_external_internal_object(Subject, Time, 1, Arity, External_Relation_Symbol, Internal_Relation_Symbol, Relation, A_External_Symbol, A_Object, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, B_Object, C_External_Symbol, C_Internal_Symbol, C_Object)?
%

%% next follow higher types (no results).

understands_external_internal_object(Subject, Time, 2, Arity, External_Relation_Symbol, Internal_Relation_Symbol, Relation, A_External_Symbol, A_Object, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, B_Object, C_External_Symbol, C_Internal_Symbol, C_Object)?
%

understands_external_internal_object(Subject, Time, 3, Arity, External_Relation_Symbol, Internal_Relation_Symbol, Relation, A_External_Symbol, A_Object, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, B_Object, C_External_Symbol, C_Internal_Symbol, C_Object)?
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% understands_external_object(Subject, Time, 0, Arity, External_Relation_Symbol, Relation, A_External_Symbol, A_Object, B_External_Symbol, B_Object, C_External_Symbol, C_Object)?
%%
%% This is for type 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simple query for this is: (and continued by semi-colons)

understands_external_object(Subject, Time, 0, Arity, External_Relation_Symbol, Relation, A_External_Symbol, A_Object, B_External_Symbol, B_Object, C_External_Symbol, C_Object)?
;
;
;

%% One would get too many results if one tried to list all of them!

%% next follow higher types (now some for type 1 - work on intension & extension).

understands_external_object(Subject, Time, 1, Arity, External_Relation_Symbol, Relation, A_External_Symbol, A_Object, B_External_Symbol, B_Object, C_External_Symbol, C_Object)?
;

%% next follow higher types (no results).

understands_external_object(Subject, Time, 2, Arity, External_Relation_Symbol, Relation, A_External_Symbol, A_Object, B_External_Symbol, B_Object, C_External_Symbol, C_Object)?
;

understands_external_object(Subject, Time, 3, Arity, External_Relation_Symbol, Relation, A_External_Symbol, A_Object, B_External_Symbol, B_Object, C_External_Symbol, C_Object)?
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% understands_external_internal(Subject, Time, 0, Arity, External_Relation_Symbol, Internal_Relation_Symbol, A_External_Symbol, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, C_External_Symbol, C_Internal_Symbol)?
%%
%% This is for type 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simple query for this is: (and continued by semi-colons)

understands_external_internal(Subject, Time, 0, Arity, External_Relation_Symbol, Internal_Relation_Symbol, A_External_Symbol, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, C_External_Symbol, C_Internal_Symbol)?
;
;
;

%% One would get too many results if one tried to list all of them!

%% next follow higher types (now some for type 1 - work on intension & extension).

understands_external_internal(Subject, Time, 1, Arity, External_Relation_Symbol, Internal_Relation_Symbol, A_External_Symbol, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, C_External_Symbol, C_Internal_Symbol)?
;

%% next follow higher types (no results).

understands_external_internal(Subject, Time, 2, Arity, External_Relation_Symbol, Internal_Relation_Symbol, A_External_Symbol, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, C_External_Symbol, C_Internal_Symbol)?
;

understands_external_internal(Subject, Time, 3, Arity, External_Relation_Symbol, Internal_Relation_Symbol, A_External_Symbol, A_Internal_Symbol, B_External_Symbol, B_Internal_Symbol, C_External_Symbol, C_Internal_Symbol)?
;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% understands_internal_object(Subject, Time, 0, Arity, Internal_Relation_Symbol, Relation, A_Internal_Symbol, A_Object, B_Internal_Symbol, B_Object, C_Internal_Symbol, C_Object)?
%%
%% This is for type 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simple query for this is: (and continued by semi-colons)

understands_internal_object(Subject, Time, 0, Arity, Internal_Relation_Symbol, Relation, A_Internal_Symbol, A_Object, B_Internal_Symbol, B_Object, C_Internal_Symbol, C_Object)?
;
;
;

%% One would get many results if one tried to list all of them!

%% next follow higher types (now some for type 1 - work on intension & extension).

understands_internal_object(Subject, Time, 1, Arity, Internal_Relation_Symbol, Relation, A_Internal_Symbol, A_Object, B_Internal_Symbol, B_Object, C_Internal_Symbol, C_Object)?
; 

%% next follow higher types (no results).

understands_internal_object(Subject, Time, 2, Arity, Internal_Relation_Symbol, Relation, A_Internal_Symbol, A_Object, B_Internal_Symbol, B_Object, C_Internal_Symbol, C_Object)?
; 

understands_internal_object(Subject, Time, 3, Arity, Internal_Relation_Symbol, Relation, A_Internal_Symbol, A_Object, B_Internal_Symbol, B_Object, C_Internal_Symbol, C_Object)?
; 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% understands_object(Subject, Time, 0, Arity, Relation, A_Object, B_Object, C_Object)?
%% This is for type 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simple query for this is: (and continued by semi-colons)


understands_object(Subject, Time, 0, Arity, Relation, A_Object, B_Object, C_Object)?
;
;
; 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% One can get all results with find_all - in this case there are fewer combinations.

find_all([Subject, Time, 0, Arity, Relation, A_Object, B_Object, C_Object], understands_object(Subject, Time, 0, Arity, Relation, A_Object, B_Object, C_Object), L)?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% next follow higher types (now some for type 1 - work on intension & extension).

find_all([Subject, Time, 1, Arity, Relation, A_Object, B_Object, C_Object], understands_object(Subject, Time, 1, Arity, Relation, A_Object, B_Object, C_Object), L)?

%% next follow higher types (no results).

understands_object(Subject, Time, 2, Arity, Relation, A_Object, B_Object, C_Object)?
; 

understands_object(Subject, Time, 3, Arity, Relation, A_Object, B_Object, C_Object)?
; 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

write_stats(Ignore)?


 

