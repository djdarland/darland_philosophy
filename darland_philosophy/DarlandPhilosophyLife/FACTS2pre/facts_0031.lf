%% Copyright (C) 2017, 2019, 2020, 2021 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.


%% Life database for use with predicates 
%% to simulate Dennis J. Darlands philosophy. 
%% Started Writing 1/4/2017
%% Major re-write starting 8/19/2019
%%
%% Total rewite of what I started about 2007.
%%

%% common_facts_2017_0001.lf    %% Facts primarily about understanding

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% conventions.
%% tom, quine, cicero etc stand for people (instances of Subjects or Objects.)
%% There could also be non-animate objects such as a table.
%% there (some would argue) might also be non-human Subjects - such as a dog.
%% tom might have an idea of cicero. This would be represented tom_cicero_idea.
%% The 1st tom indicates that it is tom's idea. cicero indicates that it is an
%% idea of cicero. The final idea indicates that it is an idea.
%% tom might have an word in a shared language for cicero. This is indicated by %% cicero_word. 
%% quine might also an idea quine_cicero_idea of cicero. (note his idea is
%% different). quine might share, however the word cicero_word with tom.

%% words are related to ideas.
%% The words being shared through learning.

%% relates words to ideas.

%% qqqq(rrrr, Type, Subject, Time, A_word, A_idea)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qqqq(rrrr, tom, now, russell_word, tom_russell_idea).
qqqq(rrrr, tom, now, quine_word, tom_quine_idea).
qqqq(rrrr, tom, now, cicero_word, tom_cicero_idea).
qqqq(rrrr, tom, now, santa_word, tom_santa_idea).
qqqq(rrrr, tom, now, catiline_word, tom_catiline_idea).
qqqq(rrrr, tom, now, tully_word, tom_tully_idea).
qqqq(rrrr, tom, now, flipper_class_word, tom_flipper_class_idea).
qqqq(rrrr, tom, now, denounced_word, tom_denounced_idea).
qqqq(rrrr, tom, now, roman_word, tom_roman_idea).
qqqq(rrrr, tom, now, american_word, tom_american_idea).
qqqq(rrrr, tom, now, dolphin_word, tom_dolphin_idea).
qqqq(rrrr, tom, now, intelligent_fish_word, tom_intelligent_fish_idea).
qqqq(rrrr, tom, now, human_word, tom_human_idea).
qqqq(rrrr, tom, now, dolphin_class_word, tom_dolphin_class_idea).
qqqq(rrrr, tom, now, intelligent_fish_class_word, tom_intelligent_fish_class_idea).
qqqq(rrrr, tom, now, roman_class_word, tom_roman_class_idea).
qqqq(rrrr, tom, now, human_class_word, tom_human_class_idea).
qqqq(rrrr, tom, now, featherless_biped_class_word, tom_featherless_biped_class_idea).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qqqq(rrrr, quine, now, russell_word, quine_russell_idea).
qqqq(rrrr, quine, now, quine_word, quine_quine_idea).
qqqq(rrrr, quine, now, santa_word, quine_santa_idea).
qqqq(rrrr, quine, now, catiline_word, quine_catiline_idea).
qqqq(rrrr, quine, now, cicero_word, quine_cicero_idea).
qqqq(rrrr, quine, now, tully_word, quine_tully_idea).
qqqq(rrrr, quine, now, denounced_word, quine_denounced_idea).
qqqq(rrrr, quine, now, roman_word, quine_roman_idea).
qqqq(rrrr, quine, now, human_word, quine_human_idea).
qqqq(rrrr, quine, now, dolphin_word, quine_dolphin_idea).
qqqq(rrrr, quine, now, dolphin_class_word, quine_dolphin_class_idea).
qqqq(rrrr, quine, now, roman_class_word, quine_roman_class_idea).
qqqq(rrrr, quine, now, human_class_word, quine_human_class_idea).
qqqq(rrrr, quine, now, featherless_biped_class_word, quine_featherless_biped_class_idea).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% qqqq(ssss, Type, Subject, Time, A_idea, A_object)
%%
%% there are two ideas for the same person - cicero (tully)
%% but prolog & wild life cannot let two atoms be identical 
%% so the object must be the same for both (cicero)
%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qqqq(ssss, tom, now, tom_russell_idea, russell).
qqqq(ssss, tom, now, tom_quine_idea, quine).
qqqq(ssss, tom, now, tom_cicero_idea, cicero).
qqqq(ssss, tom, now, tom_tully_idea, cicero).
qqqq(ssss, tom, now, tom_catiline_idea, catiline).
qqqq(ssss, tom, now, tom_denounced_idea, denounced).
qqqq(ssss, tom, now, tom_mortal_idea, mortal).
qqqq(ssss, tom, now, tom_human_idea, human).
qqqq(ssss, tom, now, tom_dolphin_idea, dolphin).
qqqq(ssss, tom, now, tom_intelligent_fish_idea, intelligent_fish).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qqqq(ssss, quine, now, quine_russell_idea, russell).
qqqq(ssss, quine, now, quine_quine_idea, quine).
qqqq(ssss, quine, now, quine_cicero_idea, cicero).
qqqq(ssss, quine, now, quine_tully_idea, cicero).
qqqq(ssss, quine, now, quine_catiline_idea, catiline).
qqqq(ssss, quine, now, quine_denounced_idea, denounced).
qqqq(ssss, quine, now, quine_mortal_idea, mortal).
qqqq(ssss, quine, now, quine_human_idea, human).
qqqq(ssss, quine, now, quine_dolphin_idea, dolphin).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qqqq(ssss, tom, now, tom_roman_idea, roman).
qqqq(ssss, tom, now, tom_american_idea, american).
qqqq(ssss, quine, now, quine_roman_idea, roman).
qqqq(ssss, quine, now, quine_american_idea, american).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qqqq(tttt, tom, now, tom_flipper_class_idea, flipper).
qqqq(tttt, tom, now, tom_intelligent_fish_class_idea, flipper).
qqqq(tttt, tom, now, tom_dolphin_class_idea, dolphin).
qqqq(tttt, tom, now, tom_roman_class_idea, cicero).
qqqq(tttt, tom, now, tom_roman_class_idea, catiline).
qqqq(tttt, tom, now, tom_human_class_idea, cicero).
qqqq(tttt, tom, now, tom_human_class_idea, catiline).
qqqq(tttt, tom, now, tom_human_class_idea, russell).  %% one more to diff roman
qqqq(tttt, tom, now, tom_featherless_biped_class_idea, cicero).
qqqq(tttt, tom, now, tom_featherless_biped_class_idea, catiline).
qqqq(tttt, tom, now, tom_featherless_biped_class_idea, russell).
qqqq(tttt, quine, now, quine_dolphin_class_idea, dolphin_class).
qqqq(tttt, quine, now, quine_roman_class_idea, cicero).
qqqq(tttt, quine, now, quine_roman_class_idea, catiline).
qqqq(tttt, quine, now, quine_human_class_idea, cicero).
qqqq(tttt, quine, now, quine_human_class_idea, catiline).
qqqq(tttt, quine, now, quine_human_class_idea, russell).
qqqq(tttt, quine, now, quine_featherless_biped_class_idea, cicero).
qqqq(tttt, quine, now, quine_featherless_biped_class_idea, catiline).
qqqq(tttt, quine, now, quine_featherless_biped_class_idea, russell).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% There are several understands relations symbols defined in terms of the
%% words and ideas.
%% This solve a problem that some philosophers have if a sentence was never
%% uttered. I only require that there was an relation_idea and
%% ideas of objects. They never even need to be related or believed.
%% Only ideas have arities and types.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qqqq(arity_idea, tom_denounced_idea, 2).
qqqq(arity_idea, tom_roman_idea, 1).
qqqq(arity_idea, tom_american_idea, 1).
qqqq(arity_idea, tom_mortal_idea, 1).
qqqq(arity_idea, tom_human_idea, 1).
qqqq(arity_idea, tom_dolphin_idea, 1).
qqqq(arity_idea, tom_intelligent_fish_idea, 1).
qqqq(type_idea, tom_denounced_idea, 1).
qqqq(type_idea, tom_mortal_idea, 2).
qqqq(type_idea, tom_human_idea, 1).
qqqq(type_idea, tom_dolphin_idea, 1).
qqqq(type_idea, tom_intelligent_fish_idea, 1).
qqqq(type_idea, tom_roman_idea, 1).
qqqq(type_idea, tom_dolphin_class_idea, 1).
qqqq(type_idea, tom_intelligent_fish_class_idea, 1).
qqqq(type_idea, tom_roman_class_idea, 1).
qqqq(type_idea, tom_human_class_idea, 1).
qqqq(type_idea, tom_featherless_biped_class_idea, 1).
qqqq(type_idea, tom_american_idea, 1).
qqqq(type_idea, tom_russell_idea, 0).
qqqq(type_idea, tom_quine_idea, 0).
qqqq(type_idea, tom_cicero_idea, 0).
qqqq(type_idea, tom_santa_idea, 0).
qqqq(type_idea, tom_tully_idea, 0).
qqqq(type_idea, tom_catiline_idea, 0).
qqqq(number_idea, tom_mortal_idea, singular).
qqqq(number_idea, tom_human_idea, singular).
qqqq(number_idea, tom_flipper_class_idea, plural).
qqqq(number_idea, tom_dolphin_idea, singular).
qqqq(number_idea, tom_intelligent_fish_idea, singular).
qqqq(number_idea, tom_denounced_idea, singular).
qqqq(number_idea, tom_roman_idea, singular).
qqqq(number_idea, tom_dolphin_class_idea, plural).
qqqq(number_idea, tom_intelligent_fish_class_idea, plural).
qqqq(number_idea, tom_roman_class_idea, plural).
qqqq(number_idea, tom_human_class_idea, plural).
qqqq(number_idea, tom_featherless_biped_class_idea, plural).
qqqq(number_idea, tom_american_idea, singular).
qqqq(number_idea, tom_russell_idea, singular).
qqqq(number_idea, tom_quine_idea, singular).
qqqq(number_idea, tom_cicero_idea, singular).
qqqq(number_idea, tom_santa_idea, singular).
qqqq(number_idea, tom_tully_idea, singular).
qqqq(number_idea, tom_catiline_idea, singular).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
qqqq(arity_idea, quine_denounced_idea, 2).
qqqq(arity_idea, quine_roman_idea, 1).
qqqq(arity_idea, quine_mortal_idea, 1).
qqqq(arity_idea, quine_human_idea, 1).
qqqq(arity_idea, quine_dolphin_idea, 1).
qqqq(arity_idea, quine_american_idea, 1).
qqqq(type_idea, quine_roman_idea, 1).
qqqq(type_idea, quine_american_idea, 1).
qqqq(type_idea, quine_denounced_idea, 1).
qqqq(type_idea, quine_human_idea, 1).
qqqq(type_idea, quine_dolphin_idea, 1).
qqqq(type_idea, quine_dolphin_class_idea, 1).
qqqq(type_idea, quine_roman_class_idea, 1).
qqqq(type_idea, quine_human_class_idea, 1).
qqqq(type_idea, quine_featherless_biped_class_idea, 1).
qqqq(type_idea, quine_mortal_idea, 2).
qqqq(type_idea, quine_russell_idea, 0).
qqqq(type_idea, quine_quine_idea, 0).
qqqq(type_idea, quine_santa_idea, 0).
qqqq(type_idea, quine_cicero_idea, 0).
qqqq(type_idea, quine_tully_idea, 0).
qqqq(type_idea, quine_catiline_idea, 0).
qqqq(number_idea, quine_mortal_idea, singular).
qqqq(number_idea, quine_denounced_idea, singular).
qqqq(number_idea, quine_roman_idea, singular).
qqqq(number_idea, quine_human_idea, singular).
qqqq(number_idea, quine_dolphin_idea, singular).
qqqq(number_idea, quine_dolphin_class_idea, plural).
qqqq(number_idea, quine_roman_class_idea, plural).
qqqq(number_idea, quine_human_class_idea, plural).
qqqq(number_idea, quine_featherless_biped_class_idea, plural).
qqqq(number_idea, quine_american_idea, singular).
qqqq(number_idea, quine_russell_idea, singular).
qqqq(number_idea, quine_quine_idea, singular).
qqqq(number_idea, quine_santa_idea, singular).
qqqq(number_idea, quine_tully_idea, singular).
qqqq(number_idea, quine_cicero_idea, singular).
qqqq(number_idea, quine_catiline_idea, singular).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% conventions.
%% tom, quine, cicero etc stand for people (instances of Subjects or Objects.)
%% There could also be non-animate objects such as a table/
%% there (some would argue) might also be non-human Subjects - such as a dog.
%% tom might have an idea of cicero. This would be represented tom_cicero_idea.
%% The 1st tom indicates that it is tom's idea. cicero indicates that it is an
%% idea of cicero. The final idea indicates that it is an idea.
%% tom might have an word in a shared language for cicero. This is indicated by %% cicero_word. 
%% quine might also an idea quine_cicero_idea of cicero. (note his idea is
%% different). quine might share, however the word cicero_word with tom.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% believes_in_ideas is the only primitive belief relation
%% needed.
%% I define several others in terms of them. 
%%

%% Beliefs

qqqq(believes_in_ideas, tom, now, [tom_denounced_idea, tom_cicero_idea,
				   tom_catiline_idea]).

qqqq(believes_in_ideas, tom, now, [tom_jibberish_idea, tom_cicero_idea,
				   tom_catiline_idea]).

qqqq(believes_in_ideas, tom, now, [tom_denounced_idea, tom_santa_idea,
				   tom_catiline_idea]).

qqqq(believes_in_ideas, tom, now, [tom_jibberish_idea, tom_santa_idea,
				   tom_catiline_idea]).

qqqq(believes_in_ideas, tom, now, [tom_roman_idea, tom_catiline_idea]).

qqqq(believes_in_ideas, tom, now, [tom_american_idea, tom_russell_idea]).

qqqq(believes_in_ideas, tom, now, [tom_denounced_idea, tom_quine_idea,
				   tom_catiline_idea]).

qqqq(believes_in_ideas, quine, now, [quine_denounced_idea, quine_cicero_idea,
				   quine_catiline_idea]).

qqqq(believes_in_ideas, quine, now, [tom_denounced_idea, tom_tully_idea,
				   tom_catiline_idea]).

qqqq(disbelieves_in_ideas, tom, now, [tom_denounced_idea, tom_tully_idea,
				       tom_catiline_idea]).

qqqq(disbelieves_in_ideas, tom, now, [tom_denounced_idea, tom_russell_idea,
				       tom_catiline_idea]).

qqqq(disbelieves_in_ideas, tom, now, [tom_roman_idea, tom_russell_idea]).

%% A fact -- indicated by qqqq4

qqqq4([denounced, cicero, catiline]).

qqqq4([roman, cicero]).

qqqq4([roman, catiline]).

qqqq4([american, tom]).

qqqq4([american, quine]).

qqqq4([denounced, cicero, catiline]).

%% Negative facts -- indicated by qqqq5

qqqq5([denounced, russell, catiline]).

qqqq5([american, russell]).

qqqq5([roman, russell]).

qqqq5([denounced, quine, catiline]).

%% was a function for experimenting
%% denounced(cicero, catiline) -> true.
qqqq4([dolphin, flipper]).
qqqq4([intelligent_fish, flipper]).
qqqq4([human, cicero]).
qqqq4([human, catiline]).
qqqq4([human, russell]).


