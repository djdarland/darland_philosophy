%% Copyright (C) 2017, 2019 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% This file only checks rules (relating to propositions). 

%% This file uses queries to demonstrate my points about
%% the non-existence of any TRUE opacity.

%% I use an example from Quine's Word & Object. (pp.144-151).

%% Tom believes that Cicero denounced Catiline.
%% Tom does not know Cicero = Tully.

%% In my philosophy, for Tom at that time,
%% "Cicero" R Toms_idea_of_Cicero
%% and
%% Toms_idea of_Cicero S Cicero
%%
%%
%% but not 
%% "Cicero" R Toms_idea_of_Tully
%% 
%%
%% In my program the relation R is represented by the predicate
%% rrrr(Subject, Time, Type, Word, Idea)
%% In my program the relation S is represented by the predicate
%% ssss(Subject, Time, Type, Idea, Object)
%% R | S is represented by rrss

dynamic(qqqq)?
load("FACTS2/facts_0001.lf")?
load("FACTS2/facts_0002.lf")?
load("FACTS2/facts_0003.lf")?
load("RULES2/rules_0001.lf")?
load("RULES2/rules_0002.lf")?
load("RULES2/rules_0003.lf")?
load("RULES2/rules_0004.lf")?
load("RULES2/life_0001.lf")?
load("RULES2/life_0002.lf")?
trace_input(true)?

write_time(Ignore)?

write("I indicate for each query whether the immediate response should be")?

write("TRUE = Yes or FALSE = No")?

write("There will be subsequient No responses - as I have asked for more answers with semicolons")?



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
write("Next should be TRUE")?

qqqq(understands_words_objects, tom, now, [[denounced_word, denounced], [cicero_word, cicero], [catiline_word, catiline]])?

write("Next should be FALSE cicero not word for catiline")?

qqqq(understands_words_objects, tom, now, [[denounced_word, denounced], [cicero_word, catiline], [catiline_word, catiline]])?

write("Next should be FALSE cicero gives type 0 for relation")?

qqqq(understands_words_objects, tom, now, [[cicero_word, cicero], [cicero_word, catiline], [catiline_word, catiline]])?

write("Next should be FALSE - wrong arity - not enough terms")?

qqqq(understands_words_objects, tom, now, [[denounced_word, denounced], [cicero_word, catiline]])?

write("Next should be FALSE - human wrong type")?

qqqq(understands_words_objects, tom, now, [[denounced_word, denounced], [cicero_word, catiline], [human_word, human]])?

write("Next should be TRUE")?

qqqq(understands_words_ideas_objects, tom, now, [[denounced_word, tom_denounced_idea, denounced], [cicero_word, tom_cicero_idea, cicero], [catiline_word, tom_catiline_idea, catiline]])?

write("Next should be FALSE - cicero word not of catiline idea")?

qqqq(understands_words_ideas_objects, tom, now, [[denounced_word, tom_denounced_idea, denounced], [cicero_word, tom_catiline_idea, cicero], [catiline_word, tom_catiline_idea, catiline]])?

write("Next should be FALSE - wrong arity")?

qqqq(understands_words_ideas_objects, tom, now, [[denounced_word, tom_denounced_idea, denounced], [cicero_word, tom_cicero_idea, cicero], [catiline_word, tom_catiline_idea, catiline], [catiline_word, tom_catiline_idea, catiline]])?

write("Next should be FALSE - wrong type")?

qqqq(understands_words_ideas_objects, tom, now, [[denounced_word, tom_denounced_idea, denounced], [cicero_word, tom_cicero_idea, cicero], [human_word, tom_human_idea, human]])?

write("Next should be FALSE")?

qqqq(subjects_understand_same_objects_by_ideas, tom, now, [[tom_denounced_idea, denounced], [tom_catiline_idea, cicero]], quine, now, [[quine_denounced_idea, denounced], [quine_cicero_idea, cicero]])?

write("Next should be TRUE")?

qqqq(subjects_understand_same_objects_by_words, tom, now, [[denounced_word, denounced], [cicero_word, cicero]], quine, now, [[denounced_word, denounced], [cicero_word, cicero]])?

write("Next should be FALSE")?

qqqq(subjects_understand_same_objects_by_words, tom, now, [[denounced_word, denounced], [tully_word, cicero]], quine, now, [[denounced_word, denounced], [cicero_word, cicero]])?


write("Next should be TRUE")?

qqqq(believes_in_ideas, tom, now, [tom_denounced_idea,
				    tom_cicero_idea,
				    tom_catiline_idea])?
;



write_stats(Ignore)?

 


