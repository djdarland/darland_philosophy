%% Copyright (C) 2017, 2019, 2020, 2021 Dennis J. Darland

%% This file is part of darland's philosophy.

%% darland's philosophy is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.

%% darland's philosophy is distributed in the hope that it will be useful, 
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%% GNU General Public License for more details.

%% You should have received a copy of the GNU General Public License
%% along with darland's philosophy. If not, see <http://www.gnu.org/licenses/>.
%% Common Prolog & Life predicates to simulate Dennis J. Darlands philosophy. 
%% Started Writing 1/4/2017 
%% This is a total rewrite of what I started about 10 years ago.

%% This is to experiment with Satisfiability.
%% It is an NP-complete problem
%% See pages 320-331 in
%% _Introduction to Automata Theory, Languages and Computation_
%% By John E. Hopcroft
%% and
%% Jefferey D. Ullman

%% First convert a boolean expression to nand using Polish notation.
%% It looks to me like a binary search. So should be polynomial time!!!

% dynamic(is_subnode)?

persistent(trav_visits)?
persistent(trav_max_depth)?
persistent(props)?
persistent(literals)?
persistent(nands)?
persistent(end_nodes)?
persistent(nand_no)?
persistent(prop_no)?

% make 1st pass - number nodes & vertices.
% also make list of all nodes under each vertex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

traverse_pass(List) :-
	trav_visits <<- 1,
	trav_max_depth <<- 1,
	nands <<- 0,
	props <<- 0,
	literals <<- 0,
	end_nodes <<- 0,
	cond(trav_2(List, 1),
	     (write("trav_visits = ", trav_visits),nl,
	      write("trav_max_depth = ", trav_max_depth),nl,
	      write("end_nodes = ", end_nodes),nl,
	      write("props = ", props),nl,
	      write("nands = ", nands),nl),
	     (write("trav_visits = ", trav_visits),nl,
	      write("trav_max_depth = ", trav_max_depth),nl,
	      write("end_nodes = ", end_nodes),nl,
	      write("props = ", props),nl,
	      write("nands = ", nands),nl,fail)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A

trav_2([top, P], Depth) :-
	cond(var(P),
	     add_prop(P)),
	cond(Depth > trav_max_depth,
	     trav_max_depth <<- Depth, succeed),
	add_end_node(P).

trav_2([top, 0], Depth) :-
	cond(Depth > trav_max_depth,
	     trav_max_depth <<- Depth, succeed),
	add_literal(top_false),
	add_end_node(top_false).

trav_2([top, 1], Depth) :-
	cond(Depth > trav_max_depth,
	     trav_max_depth <<- Depth, succeed),
	add_literal(top_true),
	add_end_node(top_true).

%% B
trav_2([nand, [top, P1], [top, P2], Depth) :-
	 cond(var(P1),
	      add_prop(P1),
	      succeed),
	 cond(var(P2),
	      add_prop(P2),
	      succeed),
       cond(Depth > trav_max_depth,
	    trav_max_depth <<- Depth, succeed),
       add_nand,
       add_end_node(P1),
	add_end_node(P2).

trav_2([nand, [top, 0], [top, 0], Depth) :-
	 add_literal(lit_false),
       add_literal(lit_false),
       cond(Depth > trav_max_depth,
	    trav_max_depth <<- Depth, succeed),
       add_nand,
       add_end_node(lit_false),
       add_end_node(lit_false).

trav_2([nand, [top, 0], [top, 1], Depth) :-
	 add_literal(lit_false),
       add_literal(lit_true),
       cond(Depth > trav_max_depth,
	    trav_max_depth <<- Depth, succeed),
       add_nand,
       add_end_node(lit_false),
       add_end_node(lit_true).

trav_2([nand, [top, 1], [top, 0], Depth) :-
	 add_literal(lit_true),
       add_literal(lit_false),
       cond(Depth > trav_max_depth,
	    trav_max_depth <<- Depth, succeed),
       add_nand,
       add_end_node(lit_true),
       add_end_node(lit_false).

trav_2([nand, [top, 1], [top, 1], Depth) :-
	 add_literal(lit_true),
       add_literal(lit_true),
       cond(Depth > trav_max_depth,
	    trav_max_depth <<- Depth, succeed),
       add_nand,
       add_end_node(lit_true),
       add_end_node(lit_true).

%% C
trav_2([nand, Prop_1, [top, P2]], Depth) :-	
	cond(var(P2),
	     add_prop(P2),succeed),
	cond(Depth > trav_max_depth,
	     trav_max_depth <<- Depth, succeed),
	add_nand,
	add_end_node(P2),
	trav_2(Prop_1, Depth + 1).

%% D
trav_2([nand, [top, P1], Prop_2], Depth) :-	
	cond(var(P1),
	     add_prop(P1),succeed),
	cond(Depth > trav_max_depth,
	     trav_max_depth <<- Depth, succeed),
	add_nand,
	add_end_node(P1),
	trav_2(Prop_2, Depth + 1).

%% E
trav_2([nand, [Prop_1, Prop2], Prop_3, Depth) :-
	cond(var(P3),
	     add_prop(P3),succeed),




	 
	cond(Depth > trav_max_depth,
	     trav_max_depth <<- Depth, succeed),
	trav_2([nand, Prop_2, Prop_3], Depth + 1).

%% F
trav_2([nand, [nand, Prop_1, Prop_2], [nand, Prop_3, Prop_4]], Depth) :-
	
	cond(Depth > trav_max_depth,
	     trav_max_depth <<- Depth, succeed),
	add_nand,
	trav_2([nand, Prop_1, Prop_2], Depth + 1),
	trav_2([nand, Prop_3, Prop_4], Depth + 1).

trav_2([nand, Prop_1, Prop_2], Depth) :-
	cond(Depth > trav_max_depth,
	     trav_max_depth <<- Depth, succeed),
	add_nand,
	trav_2([Prop_1], Depth + 1),
	trav_2([Prop_2], Depth + 1).

trav_2(List, Depth) :-
	write("Should not get here List (trav_2) = ", List, " Depth = ", Depth),
	nl.


add_end_node(Prop) :-
	end_nodes <<- end_nodes + 1.

add_prop(Prop) :-
	props <<- props + 1.

add_literal(Lit) :-
	literals <<- literals + 1.

add_nand :-
	nands <<- nands + 1,
	trav_visits <<- trav_visits + 1.

